{"componentChunkName":"component---src-templates-learn-chapter-js-content-file-path-home-runner-work-layer-5-layer-5-content-learn-mastering-service-meshes-for-developers-introduction-to-service-meshes-istio-routing-and-canary-mdx","path":"/learn/learning-paths/mastering-service-meshes-for-developers/introduction-to-service-meshes/istio/routing-and-canary.html.html","result":{"data":{"chapter":{"body":"\n\n\n<ChapterStyle>\nIn this chapter, we are going to get our hands on some of the traffic management capabilities of Istio.\n\n<br />\n<br />\n<h2 className=\"chapter-sub-heading\">Apply default destination rules</h2>\n<br />\n\nBefore we start playing with Istio's traffic management capabilities, we need to define the available versions of the deployed services. In Istio parlance, versions are called subsets. Subsets are defined in destination rules.\n\nRun the following in the custom yaml section to create default destination rules for the Bookinfo services:\n\n```yaml\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: productpage\nspec:\n  host: productpage\n  subsets:\n    - name: v1\n      labels:\n        version: v1\n---\n\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\nname: reviews\nspec:\nhost: reviews\nsubsets: - name: v1\nlabels:\nversion: v1 - name: v2\nlabels:\nversion: v2 - name: v3\nlabels:\nversion: v3\n\n---\n\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\nname: ratings\nspec:\nhost: ratings\nsubsets: - name: v1\nlabels:\nversion: v1 - name: v2\nlabels:\nversion: v2 - name: v2-mysql\nlabels:\nversion: v2-mysql - name: v2-mysql-vm\nlabels:\nversion: v2-mysql-vm\n\n---\n\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\nname: details\nspec:\nhost: details\nsubsets: - name: v1\nlabels:\nversion: v1 - name: v2\nlabels:\nversion: v2\n\n---\n\n```\n\nUsing Meshery, navigate to the Istio management page:\n\n1. Enter `default` in the `Namespace` field.\n1. Click the (+) icon on the `Apply Service Mesh Configuration` card and select `Bookinfo subsets` from the list.\n\nThis will deploy the destination rules for all the Book info services defining their subsets. Verify the destination rules created by using the command below:\n\n```sh\nkubectl get destinationrules\n\n\nkubectl get destinationrules -o yaml\n```\n\n<h2 className=\"chapter-sub-heading\">\n  Configure the default route for all services to V1\n</h2>\n<br />\n\nAs part of the bookinfo sample app, there are multiple versions of reviews service. When we load the `/productpage` in the browser multiple times we have seen the reviews service round robin between v1, v2 or v3. As the first exercise, let us first restrict traffic to just V1 of all the services.\n\nUsing Meshery, navigate to the Istio management page:\n\n1. Enter `default` in the `Namespace` field.\n2. Click the (+) icon on the `Apply Custom Configuration` card and paste the configuration below.\n\nTo view the applied rule:\n\n```sh\nkubectl get virtualservice\n```\n\nTo take a look at a specific one:\n\n```sh\nkubectl get virtualservice reviews -o yaml\n```\n\n_Please note:_ In the place of the above command, we can either use kubectl or istioctl.\n\nConfig:\n\n```yaml\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: reviews\nspec:\n  hosts:\n    - reviews\n  http:\n    - route:\n        - destination:\n            host: reviews\n            subset: v1\n---\n\n```\n\nNow when we reload the `/productpage` several times, we will ONLY be viewing the data from v1 of all the services, which means we will not see any ratings (any stars).\n\n<h2 className=\"chapter-sub-heading\"> Content-based routing</h2>\n\n<br />\nLet's replace our first rules with a new set. Enable the `ratings` service for a\nuser `jason` by routing `productpage` traffic to `reviews` v2:\n\nUsing Meshery, navigate to the Istio management page:\n\n1. Enter `default` in the `Namespace` field.\n2. Click the (+) icon on the `Apply Custom Configuration` card and paste the configuration below.\n\nThis will update the existing virtual service definition for reviews to route all traffic for user `jason` to review V2.\n\nIn a few, we should be able to verify the virtual service by using the command below:\n\n```sh\nkubectl get virtualservice reviews -o yaml\n```\n\nConfig:\n\n```yaml\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: reviews\nspec:\n  hosts:\n    - reviews\n  http:\n    - match:\n        - headers:\n            end-user:\n              exact: jason\n      route:\n        - destination:\n            host: reviews\n            subset: v2\n    - route:\n        - destination:\n            host: reviews\n            subset: v1\n---\n\n```\n\nNow if we login as your `jason`, you will be able to see data from `reviews` v2. While if you NOT logged in or logged in as a different user, you will see data from `reviews` v1.\n\n<h2 className=\"chapter-sub-heading\">Canary Testing - Traffic Shifting</h2>\n\n<br />\n<h3 className=\"chapter-sub-heading\"> Canary testing w/50% load</h3>\n\nTo start canary testing, let's begin by transferring 50% of the traffic from reviews:v1 to reviews:v3 with the following command:\n\nUsing Meshery, navigate to the Istio management page:\n\n1. Enter `default` in the `Namespace` field.\n2. Click the (+) icon on the `Apply Custom Configuration` card and paste the configuration below.\n\nThis will update the existing virtual service definition for reviews to route 50% of all traffic to review V3.\n\nIn a few, we should be able to verify the virtual service by using the command below:\n\n```sh\nkubectl get virtualservice reviews -o yaml\n```\n\nConfig:\n\n```yaml\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: reviews\nspec:\n  hosts:\n    - reviews\n  http:\n    - route:\n        - destination:\n            host: reviews\n            subset: v1\n          weight: 50\n        - destination:\n            host: reviews\n            subset: v3\n          weight: 50\n---\n\n```\n\nNow, if we reload the `/productpage` in your browser several times, you should now see red-colored star ratings approximately 50% of the time.\n\n<h3 className=\"chapter-sub-heading\"> Shift 100% to v3</h3>\n\nWhen version v3 of the reviews microservice is considered stable, we can route 100% of the traffic to reviews:v3:\n\nUsing Meshery, navigate to the Istio management page:\n\n1. Enter `default` in the `Namespace` field.\n2. Click the (+) icon on the `Apply Custom Configuration` card and paste the configuration below.\n\nThis will update the existing virtual service definition for reviews to route 100% of all traffic to review V3.\n\nIn a few, we should be able to verify the virtual service by using the command below:\n\n```sh\nkubectl get virtualservice reviews -o yaml\n```\n\nConfig:\n\n```yaml\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: reviews\nspec:\n  hosts:\n    - reviews\n  http:\n    - route:\n        - destination:\n            host: reviews\n            subset: v3\n---\n\n```\n\nNow, if we reload the `/productpage` in your browser several times, you should now see red-colored star ratings 100% of the time.\n\n<br />\n<h3>Alternative: Manual installation</h3>\nFollow these steps if the above steps did not work\n<br />\n<br />\n\n<h4 className=\"chapter-alt-heading\"> Default destination rules</h4>\n\nRun the following command to create default destination rules for the Bookinfo services:\n\n```sh\nkubectl apply -f samples/bookinfo/networking/destination-rule-all-mtls.yaml\n```\n\n<h4 className=\"chapter-alt-heading\">\n  {\" \"}\n  Route all traffic to version V1 of all services\n</h4>\n\n```sh\nkubectl apply -f samples/bookinfo/networking/virtual-service-all-v1.yaml\n```\n\n<h4 className=\"chapter-alt-heading\">\n  {\" \"}\n  Route all traffic to version V2 of reviews for user Jason\n</h4>\n\n```sh\nkubectl apply -f samples/bookinfo/networking/virtual-service-reviews-test-v2.yaml\n```\n\n<h4 className=\"chapter-alt-heading\">\n  {\" \"}\n  Route 50% of traffic to version V3 of reviews service\n</h4>\n\n```sh\nkubectl apply -f  samples/bookinfo/networking/virtual-service-reviews-50-v3.yaml\n```\n\n<h4 className=\"chapter-alt-heading\">\n  {\" \"}\n  Route 100% of traffic to version V3 of reviews service\n</h4>\n\n```sh\nkubectl apply -f samples/bookinfo/networking/virtual-service-reviews-v3.yaml\n```\n\n</ChapterStyle>\n","frontmatter":{"chapterTitle":"Request Routing and Canary Testing","description":"Meshery is the cloud native management plane which offers lifecycle, configuration, and performance management of service meshes and their workloads."},"fields":{"slug":"learn/learning-paths/mastering-service-meshes-for-developers/introduction-to-service-meshes/istio/routing-and-canary","course":"introduction-to-service-meshes","learnpath":"mastering-service-meshes-for-developers","chapter":"routing-and-canary"}},"course":{"nodes":[{"frontmatter":{"courseTitle":"Introduction to Service Meshes - Hands On","meshesYouLearn":[{"imagepath":{"childImageSharp":null,"extension":"svg","publicURL":"/static/731763d720780a49c2ffdfede8c28f4b/istio.svg"},"name":"Istio"},{"imagepath":{"childImageSharp":null,"extension":"svg","publicURL":"/static/b4f4020971de42f6fb2497075a67f325/linkerd.svg"},"name":"Linkerd"}]},"fields":{"slug":"learn/learning-paths/mastering-service-meshes-for-developers/introduction-to-service-meshes"}}]},"TOC":{"nodes":[{"frontmatter":{"order":8,"chapterTitle":"Circuit Breaking"},"fields":{"section":"istio","chapter":"circuit-breaking"}},{"frontmatter":{"order":9,"chapterTitle":"Conclusion"},"fields":{"section":"istio","chapter":"conclusion"}},{"frontmatter":{"order":2,"chapterTitle":"Deploy a sample application"},"fields":{"section":"istio","chapter":"deploy-an-application"}},{"frontmatter":{"order":3,"chapterTitle":"Exposing services through Istio Ingress Gateway"},"fields":{"section":"istio","chapter":"expose-services"}},{"frontmatter":{"order":6,"chapterTitle":"Fault Injection"},"fields":{"section":"istio","chapter":"fault-injection"}},{"frontmatter":{"order":1,"chapterTitle":"Getting Started"},"fields":{"section":"istio","chapter":"getting-started"}},{"frontmatter":{"order":7,"chapterTitle":"Mutual TLS & Identity Verification"},"fields":{"section":"istio","chapter":"mutual-tls"}},{"frontmatter":{"order":4,"chapterTitle":"Observability"},"fields":{"section":"istio","chapter":"observability"}},{"frontmatter":{"order":5,"chapterTitle":"Request Routing and Canary Testing"},"fields":{"section":"istio","chapter":"routing-and-canary"}},{"frontmatter":{"order":9,"chapterTitle":"Conclusion"},"fields":{"section":"linkerd","chapter":"conclusion"}},{"frontmatter":{"order":4,"chapterTitle":"Linkerd Dashboard"},"fields":{"section":"linkerd","chapter":"dashboard"}},{"frontmatter":{"order":5,"chapterTitle":"Debugging (Optional)"},"fields":{"section":"linkerd","chapter":"debugging"}},{"frontmatter":{"order":2,"chapterTitle":"Deploy a sample application"},"fields":{"section":"linkerd","chapter":"deploy-an-application"}},{"frontmatter":{"order":3,"chapterTitle":"Exposing services through Linkerd Ingress"},"fields":{"section":"linkerd","chapter":"expose-services"}},{"frontmatter":{"order":8,"chapterTitle":"Fault Injection"},"fields":{"section":"linkerd","chapter":"fault-injection"}},{"frontmatter":{"order":1,"chapterTitle":"Getting Started"},"fields":{"section":"linkerd","chapter":"getting-started"}},{"frontmatter":{"order":6,"chapterTitle":"Observability"},"fields":{"section":"linkerd","chapter":"observability"}},{"frontmatter":{"order":7,"chapterTitle":"Traffic Splitting using SMI and Linkerd"},"fields":{"section":"linkerd","chapter":"traffic-splitting"}}]},"serviceMeshesList":{"nodes":[{"fields":{"section":"istio"}},{"fields":{"section":"istio"}},{"fields":{"section":"istio"}},{"fields":{"section":"istio"}},{"fields":{"section":"istio"}},{"fields":{"section":"istio"}},{"fields":{"section":"istio"}},{"fields":{"section":"istio"}},{"fields":{"section":"istio"}},{"fields":{"section":"linkerd"}},{"fields":{"section":"linkerd"}},{"fields":{"section":"linkerd"}},{"fields":{"section":"linkerd"}},{"fields":{"section":"linkerd"}},{"fields":{"section":"linkerd"}},{"fields":{"section":"linkerd"}},{"fields":{"section":"linkerd"}},{"fields":{"section":"linkerd"}}]}},"pageContext":{"learnpath":"mastering-service-meshes-for-developers","slug":"learn/learning-paths/mastering-service-meshes-for-developers/introduction-to-service-meshes/istio/routing-and-canary","course":"introduction-to-service-meshes","section":"istio","chapter":"routing-and-canary","pageType":"chapter","frontmatter":{"docType":"Chapter","chapterTitle":"Request Routing and Canary Testing","description":"Meshery is the cloud native management plane which offers lifecycle, configuration, and performance management of service meshes and their workloads.","videos":4,"lectures":12,"order":5}}},"staticQueryHashes":["1376321266","1485533831","2848499768","4047814605","961506260"],"matchPath":"/learn/learning-paths/mastering-service-meshes-for-developers/introduction-to-service-meshes/istio/routing-and-canary.html"}