{"componentChunkName":"component---src-templates-learn-chapter-js-content-file-path-home-runner-work-layer-5-layer-5-content-learn-mastering-service-meshes-for-developers-introduction-to-service-meshes-istio-circuit-breaking-mdx","path":"/learn/learning-paths/mastering-service-meshes-for-developers/introduction-to-service-meshes/istio/circuit-breaking.html.html","result":{"data":{"chapter":{"body":"\n\nimport MesheryInitialLoadTest from \"../../../../src/assets/images/learn-layer5/istio/meshery_initial_load_test.webp\";\nimport MesheryCbLoadTest from \"../../../../src/assets/images/learn-layer5/istio/meshery_cb_load_test.webp\";\n\n<ChapterStyle>\n\nIn this chapter we will configure circuit breaking using Istio. Circuit breaking allows developers to write applications that limit the impact of failures, latency spikes, and other undesirable effects of network peculiarities. This task will show how to configure circuit breaking for connections, requests, and outlier detection.\n\n<h2 className=\"chapter-sub-heading\">Preparing for circuit breaking</h2>\n<br />\n\nBefore we can configure circuit breaking, please try to access the `product page` app from within `Meshery` to ensure all the calls are making it through **without** errors as we did in [Observability chapter](observability) (<a href={MesheryInitialLoadTest}>see screenshot</a>).\n\n<h2 className=\"chapter-sub-heading\"> Configure circuit breaking</h2>\n\n<br />\nNow that we have the needed services in place, it is time to configure circuit breaking\nusing a destination rule.\n\nUsing Meshery, navigate to the Istio management page:\n\n1. Enter `default` in the `Namespace` field.\n2. Click the (+) icon on the `Apply Custom Configuration` card and paste the configuration below.\n\n<p>\n  Manual step for can be found <a href=\"#appendix\">here</a>\n</p>\n\nThis will update the existing destination rule definition for product page service to break the circuit if there are more than one connection and more than one pending request.\n\nIn a few, we should be able to verify the destination rule by using the command below:\n\n```sh\nkubectl get destinationrule productpage -o yaml\n```\n\nConfig:\n\n```yaml\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: productpage\nspec:\n  host: productpage\n  subsets:\n    - /obserlabels:\n        version: v1\n      name: v1\n  trafficPolicy:\n    connectionPool:\n      http:\n        http1MaxPendingRequests: 1\n        maxRequestsPerConnection: 1\n      tcp:\n        maxConnections: 1\n    outlierDetection:\n      baseEjectionTime: 3m\n      consecutiveErrors: 1\n      interval: 1s\n      maxEjectionPercent: 100\n    tls:\n      mode: ISTIO_MUTUAL\n```\n\n<h2 className=\"chapter-sub-heading\"> Time to trip the circuit</h2>\n\n<br />\nIn the circuit-breaker settings, we specified maxRequestsPerConnection: 1 and http1MaxPendingRequests:\n1. This should mean that if we exceed more than one request per connection and more\nthan one pending request, we should see the istio-proxy sidecar open the circuit\nfor further requests/connections.\n\nLet us now use Meshery to make several calls to `product page` app by changing the number of concurrent connections to 5 from within Meshery's Performance page.\n\nOnce you have updated the fields, you now click on `Run Test`.\n\nThis will run the load test and show the results in a chart. (<a href={MesheryCbLoadTest}> see screenshot </a>).\n\nYou should only see a percentage of the requests succeed and the rest trapped by the configured circuit breaker.\n\n<br />\n<h2>\n  {\" \"}\n  <a name=\"appendix\"></a> Manual Steps\n</h2>\n\n<h3 className=\"chapter-alt-heading\"> Configure circuit breaking</h3>\n\n```sh\nkubectl apply -f - <<EOF\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: productpage\nspec:\n  host: productpage\n  subsets:\n  - labels:\n      version: v1\n    name: v1\n  trafficPolicy:\n    tls:\n      mode: ISTIO_MUTUAL\n    connectionPool:\n      tcp:\n        maxConnections: 1\n      http:\n        http1MaxPendingRequests: 1\n        maxRequestsPerConnection: 1\n    outlierDetection:\n      consecutiveErrors: 1\n      interval: 1s\n      baseEjectionTime: 3m\n      maxEjectionPercent: 100\nEOF\n```\n\n</ChapterStyle>\n","frontmatter":{"chapterTitle":"Circuit Breaking","description":"Meshery is the cloud native management plane which offers lifecycle, configuration, and performance management of service meshes and their workloads."},"fields":{"slug":"learn/learning-paths/mastering-service-meshes-for-developers/introduction-to-service-meshes/istio/circuit-breaking","course":"introduction-to-service-meshes","learnpath":"mastering-service-meshes-for-developers","chapter":"circuit-breaking"}},"course":{"nodes":[{"frontmatter":{"courseTitle":"Introduction to Service Meshes - Hands On","meshesYouLearn":[{"imagepath":{"childImageSharp":null,"extension":"svg","publicURL":"/static/731763d720780a49c2ffdfede8c28f4b/istio.svg"},"name":"Istio"},{"imagepath":{"childImageSharp":null,"extension":"svg","publicURL":"/static/b4f4020971de42f6fb2497075a67f325/linkerd.svg"},"name":"Linkerd"}]},"fields":{"slug":"learn/learning-paths/mastering-service-meshes-for-developers/introduction-to-service-meshes"}}]},"TOC":{"nodes":[{"frontmatter":{"order":8,"chapterTitle":"Circuit Breaking"},"fields":{"section":"istio","chapter":"circuit-breaking"}},{"frontmatter":{"order":9,"chapterTitle":"Conclusion"},"fields":{"section":"istio","chapter":"conclusion"}},{"frontmatter":{"order":2,"chapterTitle":"Deploy a sample application"},"fields":{"section":"istio","chapter":"deploy-an-application"}},{"frontmatter":{"order":3,"chapterTitle":"Exposing services through Istio Ingress Gateway"},"fields":{"section":"istio","chapter":"expose-services"}},{"frontmatter":{"order":6,"chapterTitle":"Fault Injection"},"fields":{"section":"istio","chapter":"fault-injection"}},{"frontmatter":{"order":1,"chapterTitle":"Getting Started"},"fields":{"section":"istio","chapter":"getting-started"}},{"frontmatter":{"order":7,"chapterTitle":"Mutual TLS & Identity Verification"},"fields":{"section":"istio","chapter":"mutual-tls"}},{"frontmatter":{"order":4,"chapterTitle":"Observability"},"fields":{"section":"istio","chapter":"observability"}},{"frontmatter":{"order":5,"chapterTitle":"Request Routing and Canary Testing"},"fields":{"section":"istio","chapter":"routing-and-canary"}},{"frontmatter":{"order":9,"chapterTitle":"Conclusion"},"fields":{"section":"linkerd","chapter":"conclusion"}},{"frontmatter":{"order":4,"chapterTitle":"Linkerd Dashboard"},"fields":{"section":"linkerd","chapter":"dashboard"}},{"frontmatter":{"order":5,"chapterTitle":"Debugging (Optional)"},"fields":{"section":"linkerd","chapter":"debugging"}},{"frontmatter":{"order":2,"chapterTitle":"Deploy a sample application"},"fields":{"section":"linkerd","chapter":"deploy-an-application"}},{"frontmatter":{"order":3,"chapterTitle":"Exposing services through Linkerd Ingress"},"fields":{"section":"linkerd","chapter":"expose-services"}},{"frontmatter":{"order":8,"chapterTitle":"Fault Injection"},"fields":{"section":"linkerd","chapter":"fault-injection"}},{"frontmatter":{"order":1,"chapterTitle":"Getting Started"},"fields":{"section":"linkerd","chapter":"getting-started"}},{"frontmatter":{"order":6,"chapterTitle":"Observability"},"fields":{"section":"linkerd","chapter":"observability"}},{"frontmatter":{"order":7,"chapterTitle":"Traffic Splitting using SMI and Linkerd"},"fields":{"section":"linkerd","chapter":"traffic-splitting"}}]},"serviceMeshesList":{"nodes":[{"fields":{"section":"istio"}},{"fields":{"section":"istio"}},{"fields":{"section":"istio"}},{"fields":{"section":"istio"}},{"fields":{"section":"istio"}},{"fields":{"section":"istio"}},{"fields":{"section":"istio"}},{"fields":{"section":"istio"}},{"fields":{"section":"istio"}},{"fields":{"section":"linkerd"}},{"fields":{"section":"linkerd"}},{"fields":{"section":"linkerd"}},{"fields":{"section":"linkerd"}},{"fields":{"section":"linkerd"}},{"fields":{"section":"linkerd"}},{"fields":{"section":"linkerd"}},{"fields":{"section":"linkerd"}},{"fields":{"section":"linkerd"}}]}},"pageContext":{"learnpath":"mastering-service-meshes-for-developers","slug":"learn/learning-paths/mastering-service-meshes-for-developers/introduction-to-service-meshes/istio/circuit-breaking","course":"introduction-to-service-meshes","section":"istio","chapter":"circuit-breaking","pageType":"chapter","frontmatter":{"docType":"Chapter","chapterTitle":"Circuit Breaking","description":"Meshery is the cloud native management plane which offers lifecycle, configuration, and performance management of service meshes and their workloads.","videos":4,"lectures":12,"order":8}}},"staticQueryHashes":["1376321266","1485533831","2848499768","4047814605","961506260"],"matchPath":"/learn/learning-paths/mastering-service-meshes-for-developers/introduction-to-service-meshes/istio/circuit-breaking.html"}