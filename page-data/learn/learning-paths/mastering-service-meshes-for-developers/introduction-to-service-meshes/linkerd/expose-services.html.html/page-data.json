{"componentChunkName":"component---src-templates-learn-chapter-js-content-file-path-home-runner-work-layer-5-layer-5-content-learn-mastering-service-meshes-for-developers-introduction-to-service-meshes-linkerd-expose-services-mdx","path":"/learn/learning-paths/mastering-service-meshes-for-developers/introduction-to-service-meshes/linkerd/expose-services.html.html","result":{"data":{"chapter":{"body":"\n\n\n<ChapterStyle>\n\n<h2 className=\"chapter-sub-heading\">Ingressing and Egressing with Linkerd</h2>\n\nLinkerd's control plane does not include ingress or egress gateways. Linkerd allows you choice of your preferred ingress (and egress) controller.\n\n<h2 className=\"chapter-sub-heading\">How to use Ingress with Linkerd</h2>\n\nIn case you're anticipating infusing Linkerd into your ingress controller's pods there is some setup required. Linkerd discovers\nservices dependent on the `:authority` or `Host` header. This permits Linkerd to comprehend what service a request is bound for without\nbeing subject to DNS or IPs.\n\nIn this workshop, you will use the NGINX Ingress Controller with Linkerd.\n\n<h3 className=\"chapter-sub-heading\"> Installing NGINX Ingress Controller</h3>\n\nUsing Meshery, select the Linkerd from the Management menu, and:\n\n1. Enter ingress-nginx into the namespace field.\n1. Click the (+) icon on the Apply Service Mesh Configuration card and select NGINX Ingress Controller to install the latest version of KIC.\n\n<h3>Alternative: Manual installation</h3>\nFollow this if the above steps did not work for you\n\n<br />\n<br />\n\n<h4 className=\"chapter-alt-heading\"> Installing NGINX Ingress Controller</h4>\n\nInstall ingress controller using Docker Desktop\n\n```sh\nkubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v0.40.2/deploy/static/provider/cloud/deploy.yaml\n```\n\nInstall the ingress controller using Minikube\n\n```sh\nminikube addons enable ingress\n```\n\n<h3 className=\"chapter-sub-heading\">\n  {\" \"}\n  Setting up Ingress controller with the sample application deployed\n</h3>\n\nUsing Meshery, click the ➡️ icon on the `Apply Custom Configuration` card and apply the following manifest to your cluster:\n\n```sh\napiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: web-ingress\n  namespace: emojivoto\n  annotations:\n    kubernetes.io/ingress.class: \"nginx\"\n    nginx.ingress.kubernetes.io/configuration-snippet: |\n      proxy_set_header l5d-dst-override $service_name.$namespace.svc.cluster.local:$service_port;\n      grpc_set_header l5d-dst-override $service_name.$namespace.svc.cluster.local:$service_port;\n\nspec:\n  rules:\n    - host: example.com\n      http:\n        paths:\n          - backend:\n              serviceName: web-svc\n              servicePort: 80\n```\n\nNginx ingress will include the `l5d-dst-override` header to tell Linkerd where to direct the request.\nYou'll need to include both the Kubernetes administration FQDN (web-svc.emojivoto.svc.cluster.local) and the destination servicePort.\n\nTo test this, you need to get the external IP of your controller.\n\n<h4 className=\"chapter-sub-heading\"> Docker Desktop</h4>\n\nYou may use http://localhost or <span>http://</span>kubernetes.docker.internal or your host's IP address.\n\n<h4 className=\"chapter-sub-heading\"> Minikube</h4>\n\nExpose your Kubernetes's cluster services to your localhost network:\n\n```sh\nminikube tunnel\n```\n\nYou may use http://localhost or You may use http://localhost: provided by the output of `minikube tunnel`.\n\n<h4 className=\"chapter-sub-heading\">Hosted Kubernetes</h4>\n\nRetrieve the external IP address by running:\n\n```sh\nkubectl get svc --all-namespaces \\\n  -l app=nginx-ingress,component=controller \\\n  -o=custom-columns=EXTERNAL-IP:.status.loadBalancer.ingress[0].ip\n```\n\nYou can now curl to your service without using port-forward, like this:\n\n```sh\ncurl -H \"Host: example.com\" http://{external-ip}\n```\n\n<br />\n\n</ChapterStyle>\n","frontmatter":{"chapterTitle":"Exposing services through Linkerd Ingress","description":"Meshery is the cloud native management plane which offers lifecycle, configuration, and performance management of service meshes and their workloads."},"fields":{"slug":"learn/learning-paths/mastering-service-meshes-for-developers/introduction-to-service-meshes/linkerd/expose-services","course":"introduction-to-service-meshes","learnpath":"mastering-service-meshes-for-developers","chapter":"expose-services"}},"course":{"nodes":[{"frontmatter":{"courseTitle":"Introduction to Service Meshes - Hands On","meshesYouLearn":[{"imagepath":{"childImageSharp":null,"extension":"svg","publicURL":"/static/731763d720780a49c2ffdfede8c28f4b/istio.svg"},"name":"Istio"},{"imagepath":{"childImageSharp":null,"extension":"svg","publicURL":"/static/b4f4020971de42f6fb2497075a67f325/linkerd.svg"},"name":"Linkerd"}]},"fields":{"slug":"learn/learning-paths/mastering-service-meshes-for-developers/introduction-to-service-meshes"}}]},"TOC":{"nodes":[{"frontmatter":{"order":8,"chapterTitle":"Circuit Breaking"},"fields":{"section":"istio","chapter":"circuit-breaking"}},{"frontmatter":{"order":9,"chapterTitle":"Conclusion"},"fields":{"section":"istio","chapter":"conclusion"}},{"frontmatter":{"order":2,"chapterTitle":"Deploy a sample application"},"fields":{"section":"istio","chapter":"deploy-an-application"}},{"frontmatter":{"order":3,"chapterTitle":"Exposing services through Istio Ingress Gateway"},"fields":{"section":"istio","chapter":"expose-services"}},{"frontmatter":{"order":6,"chapterTitle":"Fault Injection"},"fields":{"section":"istio","chapter":"fault-injection"}},{"frontmatter":{"order":1,"chapterTitle":"Getting Started"},"fields":{"section":"istio","chapter":"getting-started"}},{"frontmatter":{"order":7,"chapterTitle":"Mutual TLS & Identity Verification"},"fields":{"section":"istio","chapter":"mutual-tls"}},{"frontmatter":{"order":4,"chapterTitle":"Observability"},"fields":{"section":"istio","chapter":"observability"}},{"frontmatter":{"order":5,"chapterTitle":"Request Routing and Canary Testing"},"fields":{"section":"istio","chapter":"routing-and-canary"}},{"frontmatter":{"order":9,"chapterTitle":"Conclusion"},"fields":{"section":"linkerd","chapter":"conclusion"}},{"frontmatter":{"order":4,"chapterTitle":"Linkerd Dashboard"},"fields":{"section":"linkerd","chapter":"dashboard"}},{"frontmatter":{"order":5,"chapterTitle":"Debugging (Optional)"},"fields":{"section":"linkerd","chapter":"debugging"}},{"frontmatter":{"order":2,"chapterTitle":"Deploy a sample application"},"fields":{"section":"linkerd","chapter":"deploy-an-application"}},{"frontmatter":{"order":3,"chapterTitle":"Exposing services through Linkerd Ingress"},"fields":{"section":"linkerd","chapter":"expose-services"}},{"frontmatter":{"order":8,"chapterTitle":"Fault Injection"},"fields":{"section":"linkerd","chapter":"fault-injection"}},{"frontmatter":{"order":1,"chapterTitle":"Getting Started"},"fields":{"section":"linkerd","chapter":"getting-started"}},{"frontmatter":{"order":6,"chapterTitle":"Observability"},"fields":{"section":"linkerd","chapter":"observability"}},{"frontmatter":{"order":7,"chapterTitle":"Traffic Splitting using SMI and Linkerd"},"fields":{"section":"linkerd","chapter":"traffic-splitting"}}]},"serviceMeshesList":{"nodes":[{"fields":{"section":"istio"}},{"fields":{"section":"istio"}},{"fields":{"section":"istio"}},{"fields":{"section":"istio"}},{"fields":{"section":"istio"}},{"fields":{"section":"istio"}},{"fields":{"section":"istio"}},{"fields":{"section":"istio"}},{"fields":{"section":"istio"}},{"fields":{"section":"linkerd"}},{"fields":{"section":"linkerd"}},{"fields":{"section":"linkerd"}},{"fields":{"section":"linkerd"}},{"fields":{"section":"linkerd"}},{"fields":{"section":"linkerd"}},{"fields":{"section":"linkerd"}},{"fields":{"section":"linkerd"}},{"fields":{"section":"linkerd"}}]}},"pageContext":{"learnpath":"mastering-service-meshes-for-developers","slug":"learn/learning-paths/mastering-service-meshes-for-developers/introduction-to-service-meshes/linkerd/expose-services","course":"introduction-to-service-meshes","section":"linkerd","chapter":"expose-services","pageType":"chapter","frontmatter":{"docType":"Chapter","chapterTitle":"Exposing services through Linkerd Ingress","description":"Meshery is the cloud native management plane which offers lifecycle, configuration, and performance management of service meshes and their workloads.","videos":4,"lectures":12,"order":3}}},"staticQueryHashes":["1376321266","1485533831","2848499768","4047814605","961506260"],"matchPath":"/learn/learning-paths/mastering-service-meshes-for-developers/introduction-to-service-meshes/linkerd/expose-services.html"}