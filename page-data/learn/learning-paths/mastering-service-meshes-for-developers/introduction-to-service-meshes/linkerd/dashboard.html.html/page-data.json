{"componentChunkName":"component---src-templates-learn-chapter-js-content-file-path-home-runner-work-layer-5-layer-5-content-learn-mastering-service-meshes-for-developers-introduction-to-service-meshes-linkerd-dashboard-mdx","path":"/learn/learning-paths/mastering-service-meshes-for-developers/introduction-to-service-meshes/linkerd/dashboard.html.html","result":{"data":{"chapter":{"body":"\n\nimport Top from \"../../../../src/assets/images/learn-layer5/linkerd/top.webp\";\nimport Tap from \"../../../../src/assets/images/learn-layer5/linkerd/tap.webp\";\n\n<ChapterStyle>\n\n<h2 className=\"chapter-sub-heading\">Introduction to Linkerd Dashboard</h2>\n\nThe Dashboard provides a clickable user interface for administration of Linkerd. The Dashboard provides measurements of success rate, requests/second and latency for services on the mesh. Run the Linkerd Dashboard, by executing:\n\n```sh\nlinkerd dashboard &\n```\n\nThis command port-forwards from your local system to the `linkerd-web` service. You can also expose the dashboard using Kubernetes `ingress`, which we will see later in this section.\n\nSince Linkerd's control plane components have the Linkerd proxy sidecarred, you can examine statistics of the traffic you are generating by looking at the dashboard. Execute:\n\n```sh\nlinkerd -n linkerd top deploy/linkerd-web\n```\n\n<h3 className=\"chapter-sub-heading\">Exposing the dashboard</h3>\n\nInstead of using linkerd dashboard & every time you'd like to see what's going on, you can expose the dashboard via an ingress. We will use the Nginx ingress, which we had deployed and used in Lab 3.\n\nWe will be applying Nginx ingress-traffic rule with basic authentication protocol\n\n```sh\napiVersion: v1\nkind: Secret\ntype: Opaque\nmetadata:\n  name: web-ingress-auth\n  namespace: linkerd\ndata:\n  auth: YWRtaW46JGFwcjEkbjdDdTZnSGwkRTQ3b2dmN0NPOE5SWWpFakJPa1dNLgoK\n---\napiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: web-ingress\n  namespace: linkerd\n  annotations:\n    kubernetes.io/ingress.class: \"nginx\"\n    nginx.ingress.kubernetes.io/upstream-vhost: $service_name.$namespace.svc.cluster.local:8084\n    nginx.ingress.kubernetes.io/configuration-snippet: |\n      proxy_set_header Origin \"\";\n      proxy_hide_header l5d-remote-ip;\n      proxy_hide_header l5d-server-id;\n    nginx.ingress.kubernetes.io/auth-type: basic\n    nginx.ingress.kubernetes.io/auth-secret: web-ingress-auth\n    nginx.ingress.kubernetes.io/auth-realm: \"Authentication Required\"\nspec:\n  rules:\n    - host: dashboard.example.com\n      http:\n        paths:\n          - backend:\n              serviceName: linkerd-web\n              servicePort: 8084\n```\n\nThis exposes the dashboard at `dashboard.example.com` and protects it with basic auth with credentials admin,admin.\n\nFrom here you may need to modify your resolv.conf to add `dashboard.example.com` to localhost or use an alternative approach in order to see the dashboard deployment. We will not cover this in the workshop.\n\n<h3 className=\"chapter-sub-heading\">Tools exposed by dashboard</h3>\n\nLinkerd dashboard exposes various CLI tools which may come handy while you debug your application running on mesh.\n\nMainly there are three tools which Linkerd exposes as an extension to it's CLI commands\n\n**stat**\n\nThis will show the “golden” metrics for each deployment:\n\n1. Success rates\n1. Request rates\n1. Latency distribution percentiles\n\n**top**\n\nTo get a real-time view of which paths are being called.\n\n{\" \"}\n<a href={Top}>\n  <img src={Top} width=\"100%\" align=\"center\" />\n</a>\n\n**tap**\n\nShows the stream of requests across a single pod, deployment, or even everything in the emojivoto namespace.\n\n{\" \"}\n<a href={Tap}>\n  <img src={Tap} width=\"100%\" align=\"center\" />\n</a>\n\n</ChapterStyle>\n","frontmatter":{"chapterTitle":"Linkerd Dashboard","description":"Meshery is the cloud native management plane which offers lifecycle, configuration, and performance management of service meshes and their workloads."},"fields":{"slug":"learn/learning-paths/mastering-service-meshes-for-developers/introduction-to-service-meshes/linkerd/dashboard","course":"introduction-to-service-meshes","learnpath":"mastering-service-meshes-for-developers","chapter":"dashboard"}},"course":{"nodes":[{"frontmatter":{"courseTitle":"Introduction to Service Meshes - Hands On","meshesYouLearn":[{"imagepath":{"childImageSharp":null,"extension":"svg","publicURL":"/static/731763d720780a49c2ffdfede8c28f4b/istio.svg"},"name":"Istio"},{"imagepath":{"childImageSharp":null,"extension":"svg","publicURL":"/static/b4f4020971de42f6fb2497075a67f325/linkerd.svg"},"name":"Linkerd"}]},"fields":{"slug":"learn/learning-paths/mastering-service-meshes-for-developers/introduction-to-service-meshes"}}]},"TOC":{"nodes":[{"frontmatter":{"order":8,"chapterTitle":"Circuit Breaking"},"fields":{"section":"istio","chapter":"circuit-breaking"}},{"frontmatter":{"order":9,"chapterTitle":"Conclusion"},"fields":{"section":"istio","chapter":"conclusion"}},{"frontmatter":{"order":2,"chapterTitle":"Deploy a sample application"},"fields":{"section":"istio","chapter":"deploy-an-application"}},{"frontmatter":{"order":3,"chapterTitle":"Exposing services through Istio Ingress Gateway"},"fields":{"section":"istio","chapter":"expose-services"}},{"frontmatter":{"order":6,"chapterTitle":"Fault Injection"},"fields":{"section":"istio","chapter":"fault-injection"}},{"frontmatter":{"order":1,"chapterTitle":"Getting Started"},"fields":{"section":"istio","chapter":"getting-started"}},{"frontmatter":{"order":7,"chapterTitle":"Mutual TLS & Identity Verification"},"fields":{"section":"istio","chapter":"mutual-tls"}},{"frontmatter":{"order":4,"chapterTitle":"Observability"},"fields":{"section":"istio","chapter":"observability"}},{"frontmatter":{"order":5,"chapterTitle":"Request Routing and Canary Testing"},"fields":{"section":"istio","chapter":"routing-and-canary"}},{"frontmatter":{"order":9,"chapterTitle":"Conclusion"},"fields":{"section":"linkerd","chapter":"conclusion"}},{"frontmatter":{"order":4,"chapterTitle":"Linkerd Dashboard"},"fields":{"section":"linkerd","chapter":"dashboard"}},{"frontmatter":{"order":5,"chapterTitle":"Debugging (Optional)"},"fields":{"section":"linkerd","chapter":"debugging"}},{"frontmatter":{"order":2,"chapterTitle":"Deploy a sample application"},"fields":{"section":"linkerd","chapter":"deploy-an-application"}},{"frontmatter":{"order":3,"chapterTitle":"Exposing services through Linkerd Ingress"},"fields":{"section":"linkerd","chapter":"expose-services"}},{"frontmatter":{"order":8,"chapterTitle":"Fault Injection"},"fields":{"section":"linkerd","chapter":"fault-injection"}},{"frontmatter":{"order":1,"chapterTitle":"Getting Started"},"fields":{"section":"linkerd","chapter":"getting-started"}},{"frontmatter":{"order":6,"chapterTitle":"Observability"},"fields":{"section":"linkerd","chapter":"observability"}},{"frontmatter":{"order":7,"chapterTitle":"Traffic Splitting using SMI and Linkerd"},"fields":{"section":"linkerd","chapter":"traffic-splitting"}}]},"serviceMeshesList":{"nodes":[{"fields":{"section":"istio"}},{"fields":{"section":"istio"}},{"fields":{"section":"istio"}},{"fields":{"section":"istio"}},{"fields":{"section":"istio"}},{"fields":{"section":"istio"}},{"fields":{"section":"istio"}},{"fields":{"section":"istio"}},{"fields":{"section":"istio"}},{"fields":{"section":"linkerd"}},{"fields":{"section":"linkerd"}},{"fields":{"section":"linkerd"}},{"fields":{"section":"linkerd"}},{"fields":{"section":"linkerd"}},{"fields":{"section":"linkerd"}},{"fields":{"section":"linkerd"}},{"fields":{"section":"linkerd"}},{"fields":{"section":"linkerd"}}]}},"pageContext":{"learnpath":"mastering-service-meshes-for-developers","slug":"learn/learning-paths/mastering-service-meshes-for-developers/introduction-to-service-meshes/linkerd/dashboard","course":"introduction-to-service-meshes","section":"linkerd","chapter":"dashboard","pageType":"chapter","frontmatter":{"docType":"Chapter","chapterTitle":"Linkerd Dashboard","description":"Meshery is the cloud native management plane which offers lifecycle, configuration, and performance management of service meshes and their workloads.","videos":4,"lectures":12,"order":4}}},"staticQueryHashes":["1376321266","1485533831","2848499768","4047814605","961506260"],"matchPath":"/learn/learning-paths/mastering-service-meshes-for-developers/introduction-to-service-meshes/linkerd/dashboard.html"}