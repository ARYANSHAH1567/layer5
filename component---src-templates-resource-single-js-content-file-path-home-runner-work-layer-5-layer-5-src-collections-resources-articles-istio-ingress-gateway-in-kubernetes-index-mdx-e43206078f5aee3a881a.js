(self.webpackChunkLayer5=self.webpackChunkLayer5||[]).push([[25640],{78705:function(e,t,n){var r=n(15301).w_;e.exports.O=function(e){return r({tag:"svg",attr:{viewBox:"0 0 512 512"},child:[{tag:"path",attr:{d:"M256 48C141.1 48 48 141.1 48 256s93.1 208 208 208 208-93.1 208-208S370.9 48 256 48zm43.4 289.1c7.5 7.5 7.5 19.8 0 27.3-3.8 3.8-8.7 5.6-13.6 5.6s-9.9-1.9-13.7-5.7l-94-94.3c-6.9-7.6-6.7-19.3.6-26.6l95.4-95.7c7.5-7.5 19.7-7.6 27.3 0 7.5 7.5 7.6 19.7 0 27.3l-81.9 81 79.9 81.1z"}}]})(e)}},99313:function(e,t,n){"use strict";n.r(t),n.d(t,{Head:function(){return h},default:function(){return m}});var r=n(39626),a=n(67294),s=(n.p,n.p+"static/Istio Ingress Gateway No Title-0f1dfab6751856dedc649b56f3490fc1.webp");function o(e){var t=Object.assign({p:"p",pre:"pre",code:"code"},(0,r.ah)(),e.components),n=t.ResourcesWrapper;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("ResourcesWrapper",!0),a.createElement(n,null,a.createElement("p",null,a.createElement(t.p,null,"Predominantly, Kubernetes has used an Ingress controller to handle the traffic that enters the cluster from the outside.\nIstio has replaced all the familiar Ingress resource with new Gateway and VirtualServices resources.\nThey work in sync to route all the traffic into the mesh.\nInside the mesh there is no requirement for Gateways since the services can access each other by a cluster local service name.")),a.createElement("h3",null,"Letâ€™s understand the working with a representation"),a.createElement("p",null,a.createElement("img",{src:s,align:"center",alt:"Istio Ingress Gateway in Kubernetes No Title"})),a.createElement("p",null,a.createElement("ul",null,a.createElement("li",null,"Firstly A request is made by a client on a specific port"),a.createElement("li",null,"Then a load balancer on this port listens and forwards the request to one of the workers in theh cluster on same or a new port"),a.createElement("li",null,"Inside the cluster the request is routed to the Istio Ingress Gateway which is listened on the port of the load balancer"),a.createElement("li",null,"The Service forwards the requestto an Istio Ingress Gateway Pod which is managed by a deployment"),a.createElement("li",null,"The Ingress Gateway Pod is configured by a Gateway and a VirtualService."),a.createElement("li",null,"The Gateway configures all the ports, protocol, and certificates."),a.createElement("li",null,"The Virtual Service configures all the routing information to find the correct Servicein it."),a.createElement("li",null,"The Istio Ingress Gateway Pod routes the request to the application Service."),a.createElement("li",null,"And lastly, the application Service routes the request to an application Pod which is managed by a deployment."))),a.createElement("ul"),a.createElement("h2",null,a.createElement(t.p,null,"Ingress Gateway Service")),a.createElement("p",null,a.createElement(t.p,null,"The Ingress Gateway Service must listen to all the ports to be able to forward the traffic to the Ingress Gateway pods.\nHere we will be using routing to bring all the port numbers back to their initial state.")),a.createElement("p",null,a.createElement(t.p,null,'Note that a Kubernetes Service is not a real service, but, since we are using type:\n"NodePort", all the request will be handled by the kube-proxy provided by Kubernetes and forwarded to a node with a current running pod.\nOnce on the node, an IP-tables is configured a request will be forwarded to the appropriate pod.')),a.createElement(t.pre,null,a.createElement(t.code,{className:"language-yaml"},"\n# From the istio-ingressgateway service\n  ports:\n  - name: http2\n    nodePort: 30000\n    port: 80\n    protocol: TCP\n  - name: https\n    nodePort: 30443\n    port: 443\n    protocol: TCP\n  - name: mysql\n    nodePort: 30306\n    port: 3306\n    protocol: TCP\n")),a.createElement("p",null,a.createElement(t.p,null,"If we inspect the service, we will see that it defines more ports than we have describe above.\nSo these ports will be used for all the internal Istio communication.")),a.createElement("h2",null,a.createElement(t.p,null,"Ingress Gateway Deployment")),a.createElement("p",null,a.createElement(t.p,null,"It's a wrapper around the Envoy proxy and it is configured as the sidecars used inside the service mesh.\nWhen a Gateway or VirtualService gets changed,\nthey are detected by the Istio Pilot controller and converts this information to an Envoy configuration and sends it to all the proxies, including the Envoy inside the IngressGateway.")),a.createElement("p",null,a.createElement(t.p,null,"Since container ports are not supposed to be declared in Kubernetes pods, we don't have to declare the ports in the Ingress Gateway Deployment.\nIf we look inside the deployment we can see that there are a number of ports that are already declared anyway.\nWe have to take care about the Ingress Gateway Deployment in SSL certificates.\nTo access the certificates inside the Gateway resources, make sure that we have mounted all the required certificates properly.")),a.createElement(t.pre,null,a.createElement(t.code,{className:"language-yaml"},"\n# Example represents volume mounts\nvolumeMounts:\n- mountPath: /etc/istio/ingressgateway-certs\n  name: ingressgateway-certs\n  readOnly: true\n- mountPath: /etc/istio/ingressgateway-ca-certs\n  name: ingressgateway-ca-certs\n  readOnly: true\n\n# Example represents volumes\nvolumes:\n- name: ingressgateway-certs\n  secret:\n    defaultMode: 420\n    optional: true\n    secretName: istio-ingressgateway-certs\n- name: ingressgateway-ca-certs\n  secret:\n    defaultMode: 420\n    optional: true\n    secretName: istio-ingressgateway-ca-certs\n")),a.createElement("h2",null,"The Gateway"),a.createElement("p",null,a.createElement(t.p,null,"The Gateway resources are used to configure the ports for Envoy and also support for the Kubernetes Ingress.\nSince all the three ports are exposed with the servies, we need these ports to be handled by the Envoy.\nIt can be handled by declaring one or more Gateways.")),a.createElement(t.pre,null,a.createElement(t.code,{className:"language-yaml"},"\napiVersion: networking.istio.io/v1alpha3\nkind: Gateway\nmetadata:\n  name: default-gateway\n  namespace: istio-system\nspec:\n  selector:\n    istio: ingressgateway\n  servers:\n\n  - hosts:\n    - '*'\n    port:\n      name: http\n      number: 80\n      protocol: HTTP\n\n  - hosts:\n    - '*'\n    port:\n      name: https\n      number: 443\n      protocol: HTTPS\n    tls:\n      mode: SIMPLE\n      privateKey: /etc/istio/ingressgateway-certs/tls.key\n      serverCertificate: /etc/istio/ingressgateway-certs/tls.crt\n\n  - hosts: # For all the TCP routing this fields will be ignored, but it will be matched\n    - '*'  # with the VirtualService, We use * since it will match anything.\n    port:\n      name: mysql\n      number: 3306\n      protocol: TCP\n")),a.createElement("h2",null,"VirtualService"),a.createElement("p",null,a.createElement(t.p,null,"The last interesting resource we have is the VirtualService, it used in concert with the Gateway to configure Envoy.")),a.createElement("p",null,a.createElement(t.p,null,"A general configuration for an HTTP(s) service")),a.createElement(t.pre,null,a.createElement(t.code,{className:"language-yaml"},"\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: counter\nspec:\n  gateways:\n  - default-gateway.istio-system.svc.cluster.local\n  hosts:\n  - counter.lab.example.com\n  http:\n  - match:\n    - uri:\n      prefix: /\n    route:\n    - destination:\n        host: counter\n        port:\n          number: 80\n\n")),a.createElement("h2",null,"Application Service and Deployment"),a.createElement("p",null,a.createElement(t.p,null,"The request have now reached the application service and deployment. These are normal Kubernetes resources.")),a.createElement("h2",null,"Extras:"),a.createElement("h3",null,"Debugging Istio Gateway"),a.createElement("p",null,a.createElement(t.p,null,"First we will use istioctl to check the configuration status of Istio Ingress Gateway:")),a.createElement(t.pre,null,a.createElement(t.code,{className:"language-yaml"},"\n# istioctl proxy-status istio-ingressgateway-5586f47659-r64lb.istio-system\nClusters Match\nListeners Match\nRoutes Match\n\n")),a.createElement("p",null,a.createElement(t.p,null,"If anything does not get synced with it, try restarting the ingress gateway pod once - it may be possible that it somehow an update got missed.\nIf RDS looked good, we can check access logs of it.")),a.createElement(t.pre,null,a.createElement(t.code,{className:"language-yaml"},'\n#kubectl get configmap istio -n istio-system -o yaml | grep "accessLogFile: "\ndisable access log.\\naccessLogFile: \\"/dev/stdout\\"\\n\\n# If accessLogEncoding\n\n')),a.createElement("p",null,a.createElement(t.p,null,"Once all the access logs are enabled, we can try torequest a few more times and check the logs on the Ingress Gateway:")),a.createElement(t.pre,null,a.createElement(t.code,{className:"language-yaml"},"\n# kubectl logs -n istio-system istio-ingressgateway-5586f47659-r64lb | grep -v deprecated\n\n")))}var l=function(e){void 0===e&&(e={});var t=Object.assign({},(0,r.ah)(),e.components).wrapper;return t?a.createElement(t,e,a.createElement(o,e)):o(e)};var i=n(17875),c=n(72417),u=function(e){var t=e.data,n=e.children;return a.createElement(a.Fragment,null,a.createElement(c.Z,{data:t},n))};function m(e){return a.createElement(u,e,a.createElement(l,e))}var h=function(e){var t=e.data;return a.createElement(i.Z,{title:t.mdx.frontmatter.title,image:t.mdx.frontmatter.thumbnail.publicURL})}},72417:function(e,t,n){"use strict";n.d(t,{Z:function(){return b}});var r=n(67294),a=n(71082),s=n(40156),o=n(6652),l=n(33754),i=n(85313).default.div.withConfig({displayName:"resourceSinglestyle__ResourcePageWrapper",componentId:"sc-gfz8rr-0"})(["\n    color: ",";\n    .single-resource-wrapper{\n        margin-bottom: 4rem;\n\n        h3 {\n            text-align: center;\n        }\n    }\n\n    .resource-info-block{\n        margin-top: 3rem;\n        border-bottom: 1px solid ",";\n        padding-bottom: 2rem;\n    }\n    p {\n        color: ",";\n    }\n    li {\n        color: ",";\n    }\n    .backBtn {\n        margin: 3rem auto;\n        font-weight: 600;\n        z-index: 2;\n\n        @media screen and (max-width: 62rem) {\n            display: none;\n        }\n        a{\n            display: flex;\n            color: ",";\n            &:hover{\n                color: ",";\n            }\n\n            h4 {\n                line-height: 1.75rem;\n                margin-left: 0.5rem;\n            }\n            svg {\n                font-size: 1.75rem;\n            }\n        }\n    }\n\n    .tags{\n        display: flex;\n        span{\n            font-size: 1.2rem;\n            align-self: center;\n        }\n        a{\n            color: ",";\n            margin: 0.2rem;\n            display: inline-block;\n            padding: 0.3rem 0.8rem;\n            border-radius: 0.2rem;\n            background: #F0F0F0;\n            transition: all 0.3s linear;\n            &:hover{\n                background: ",";\n                color: ",";\n            }\n        }\n        div{\n            display: inline-flex;\n            flex-wrap: wrap;\n        }\n    }\n    @media screen and (max-width: 360px){\n        .tags{\n            span{\n                position: relative;\n                top: 0.5rem;\n                align-self: flex-start;\n            }\n        }\n    }\n"],(function(e){return e.theme.text}),(function(e){return e.theme.text}),(function(e){return e.theme.text}),(function(e){return e.theme.text}),(function(e){return e.theme.primaryColor}),(function(e){return e.theme.linkColor}),(function(e){return e.theme.black}),(function(e){return e.theme.secondaryColor}),(function(e){return e.theme.white})),c=n(75472),u=n.n(c),m=n(64721),h=n.n(m);function d(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(n)return(n=n.call(e)).next.bind(n);if(Array.isArray(e)||(n=function(e,t){if(!e)return;if("string"==typeof e)return p(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return p(e,t)}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0;return function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function p(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var g=function(){function e(e,t){this.resources=e.filter((function(e){return e.fields.slug!==t})),this.currentResourceSlug=t,this.maxResources=6,this.category=null,this.tags=[]}var t=e.prototype;return t.setMaxResources=function(e){return this.maxResources=e,this},t.setCategory=function(e){return this.category=e,this},t.setTags=function(e){return this.tags=e,this},t.getResources=function(){var e=this.category,t=this.tags,n=this.resources,r=this.maxResources,a={};if(!1==!!t||0===t.length)return console.error("RelatedResourcesFactory: Tags not provided, use setTags()."),[];if(!1==!!e)return console.error("RelatedResourcesFactory: Category not provided, use setCategory()."),[];for(var s,o=function(e){return e.fields.slug},l=function(e){var t=o(e);Object.prototype.hasOwnProperty.call(a,t)||(a[t]={resource:e,points:0})},i=function(e,t){var n=o(e);e.frontmatter.category===t&&(a[n].points+=2)},c=function(e,t){var n=o(e);e.frontmatter.tags.forEach((function(e){h()(t,e)&&(a[n].points+=1)}))},m=d(n);!(s=m()).done;){var p=s.value;l(p),i(p,e),c(p,t)}var g=Object.keys(a).map((function(e){return a[e]}));return u()(g,["points"],["desc"]).splice(0,r)},e}(),y=n(78705),f=(0,s.ZP)((function(){return n.e(35575).then(n.bind(n,59434))})),w=(0,s.ZP)((function(){return Promise.all([n.e(40532),n.e(67326),n.e(18514)]).then(n.bind(n,24210))})),b=function(e){var t=e.data,n=e.children,s=t.mdx,c=s.frontmatter,u=s.fields,m=(0,a.useStaticQuery)("2848499768").allMdx.nodes,h=new g(m,u.slug).setMaxResources(6).setCategory(c.category).setTags(c.tags).getResources();return r.createElement(i,null,r.createElement(l.Z,{title:c.title,subtitle:c.subtitle,thumbnail:c.thumbnail}),r.createElement("div",{className:"single-resource-wrapper"},r.createElement(o.W2,null,n,r.createElement(f,{category:"MeshMap"}),r.createElement("div",{className:"backBtn"},r.createElement(a.Link,{to:"/resources"},r.createElement(y.O,null),r.createElement("h4",null,"All Resources"))),r.createElement(w,{resourceType:"resources",relatedResources:h,mainHead:"Related Resources",lastCardHead:"All Resources",linkToAllItems:"/resources"}))))}}}]);