(self.webpackChunkLayer5=self.webpackChunkLayer5||[]).push([[98398],{78705:function(e,t,n){var r=n(15301).w_;e.exports.O=function(e){return r({tag:"svg",attr:{viewBox:"0 0 512 512"},child:[{tag:"path",attr:{d:"M256 48C141.1 48 48 141.1 48 256s93.1 208 208 208 208-93.1 208-208S370.9 48 256 48zm43.4 289.1c7.5 7.5 7.5 19.8 0 27.3-3.8 3.8-8.7 5.6-13.6 5.6s-9.9-1.9-13.7-5.7l-94-94.3c-6.9-7.6-6.7-19.3.6-26.6l95.4-95.7c7.5-7.5 19.7-7.6 27.3 0 7.5 7.5 7.6 19.7 0 27.3l-81.9 81 79.9 81.1z"}}]})(e)}},22953:function(e,t,n){"use strict";n.r(t),n.d(t,{Head:function(){return m},default:function(){return h}});var r=n(39626),i=n(67294),a=n.p+"static/figure1-2e4e15a2aee3e385cb64c3571e542d62.webp";function o(e){var t=Object.assign({p:"p"},(0,r.ah)(),e.components),n=t.ResourcesWrapper,o=t.Link;return o||c("Link",!0),n||c("ResourcesWrapper",!0),i.createElement(n,null,i.createElement("div",{className:"intro"},i.createElement("p",null,"Learn more about service mesh fundamentals in ",i.createElement(o,{className:"blog",to:"/learn/service-mesh-books/the-enterprise-path-to-service-mesh-architectures-2nd-edition"},"The Enterprise Path to Service Mesh Archictures (2nd Edition)")," -  free book and excellent resource which addresses how to evaluate your organization’s readiness, provides factors to consider when building new applications and converting existing applications to best take advantage of a service mesh, and offers insight on deployment architectures used to get you there.")),i.createElement("p",null,i.createElement(t.p,null,"Many emerging technologies are based on or reincarnated from prior thinking and approaches to computing and networking paradigms. Why is this phenomenon required? We'll look to the microservices and containers movement for service meshes, a cloud-native approach to design scalable, independently supplied services. What was previously internal application communications have become a mesh of service-to-service remote procedure calls (RPCs) transported via networks thanks to microservices. Microservices democratize language and technology choice across independent service teams that generate new features quickly as they iteratively and continuously provide software(typically as a service). The most crucial driver of microservices as an architectural model is the decoupling of engineering teams and their enhanced speed.")),i.createElement("h3",null,"Operating Many Services"),i.createElement("p",null,i.createElement(t.p,null,'The initial couple of microservices are relatively simple to deliver and operate—at least in comparison to organizations\' challenges when they first use many microservices. Whether that "many" is three or one hundred, a major technological issue will inevitably arise. To relieve microservices headaches, several remedies are prescribed; one notable example is the use of client libraries. In microservices environments, language and framework-specific client libraries, whether pre-existing or generated, are utilized to address distributed systems challenges. Many teams first explore their path to a service mesh in these situations. The sheer volume of services that must be managed on an individual, distributed basis (rather than centrally as with monoliths) and the challenges of ensuring their reliability, observability, and security cannot be met with outmoded paradigms, necessitating the need to reincarnate prior thinking and approaches. It is necessary to adapt new tools and techniques.')),i.createElement("p",null,i.createElement(t.p,null,"Since microservices are distributed (often ephemeral) by nature, and the network is critical to their functioning, we should consider the fallacy that networks are reliable, have no latency, have infinite bandwidth, and that communication is guaranteed. When you consider how important it is to be able to control and secure service communication in distributed systems that rely on network calls with every transaction, every time an application is invoked, you can see why you are under tooled and why running more than a few microservices on a network topology that is in constant flux is so difficult. In the age of microservices, a new layer of tooling for the caretaking of services is needed—a service mesh is needed.")),i.createElement("h3",null,"What Is a Service Mesh?"),i.createElement("p",null,"Service meshes provide intent-based networking for microservices describing desired behavior of the network in the face of constantly changing conditions and network topology. At their core, service meshes provide:"),i.createElement("ul",null,i.createElement("li",null,"A services-first network;"),i.createElement("li",null,"A developer-driven network;"),i.createElement("li",null,"A network that is primarily concerned with alleviating application developers from building infrastructure concerns into their application code; "),i.createElement("li",null,"A network that empowers operators with the ability to declaratively define network behavior, node identity, and traffic flow through policy; "),i.createElement("li",null,"A network that enables service owners to control application logic without engaging developers to change its code.")),i.createElement("p",null,i.createElement(t.p,null,"Value derived from the layer of tooling that service meshes provide is most evident in the land of microservices. The more services, the more value derived from the mesh. In subsequent chapters, I show how service meshes provide value outside of the use of microservices and containers and help modernize existing services (running on virtual or bare metal servers) as well.")),i.createElement("p",null,i.createElement(t.p,null,"Many of you will find yourself working in organizations that have more than one sort of service mesh. Diversity is driven by a broad set of workload requirements varying from process-based to event-driven in their design, from those running on bare metal to executing in functions and those representing every style of deployment artifact in-between. The scope of service mesh capability required by different organizations varies. As a result, different service meshes are created with slightly different use cases in mind, resulting in differences in service mesh architecture and deployment models. Service meshes, which are driven by Cloud, Hybrid, On-Prem, and Edge, can enable each of these. With the requirements of different edge devices and their functions, along with ephemeral cloud-based workloads, microservice patterns and technologies give a plethora of opportunities for service mesh differentiation and specialization. Cloud vendors produce and collaborate as they provide service mesh as a managed service on their platforms.")),i.createElement("div",{className:"center"},i.createElement("img",{src:a,align:"center",alt:"comparative spectrum"}),i.createElement("p",null,"Figure 1: A comparative spectrum of the difference between some of the service meshes based on their individual strengths.")),i.createElement("p",null,i.createElement(t.p,null,"The demand for service meshes, including meshes native to specific cloud platforms, is growing in tandem with the number of microservices. As a result, many enterprises now use various service mesh products, either separately or together.")),i.createElement("h3",null,"Service Mesh Abstractions"),i.createElement("p",null,"Because there are any number of service meshes available, independent specifications have cropped up to provide abstraction and standardization across them. Three service mesh abstractions exist today:"),i.createElement("ul",null,i.createElement("li",null,i.createElement(o,{to:"/projects/service-mesh-performance"},"Service Mesh Performance")," (SMP) is a format for describing and capturing service mesh performance. Created by Layer5; Meshery is the canonical implementation of this specification."),i.createElement("li",null,"Multi-Vendor Service Mesh Interoperation (Hamlet) is a set of API standards for enabling service mesh federation. Created by VMware."),i.createElement("li",null,i.createElement(o,{to:"/projects/service-mesh-interface-conformance"},"Service Mesh Interface")," (SMI) is a standard interface for service meshes on Kubernetes. Created by Microsoft; Meshery is the official SMI conformance tool used to ensure that a cluster is properly configured and that its behavior conforms to official SMI specifications.")),i.createElement("h3",null,"Service Mesh Landscape"),i.createElement("p",null,i.createElement(t.p,null,"Let's start characterizing different service meshes now that we better understand why we live in a multi-mesh world. Some service meshes support non-containerized workloads (services operating on a VM or on bare metal), while others specialize in layering on top of container orchestrators, such as Kubernetes. All service meshes support integration with service discovery systems. The subsections that follow provide a very brief survey of service mesh offerings within the current technology landscape.")),i.createElement("div",{className:"fact-left"},i.createElement("p",null,i.createElement(t.p,null,"See the Layer5 ",i.createElement(o,{to:"/service-mesh-landscape"},"service mesh landscape")," for a comprehensive overview and characterizing of all of the service meshes, service proxies, and related tools available today. This landscape is community-maintained and places service meshes in contrast with one another so that the reader might make the most informed decision about which service mesh best suits their needs."))),i.createElement("h3",null,"Why Do I Need One?"),i.createElement("p",null,i.createElement(t.p,null,'"I have a container orchestrator; why do I need another infrastructure layer?" you might wonder. Container orchestrators provide most of what the cluster (nodes and containers) requires.  Container orchestrators\' primary focus is on scheduling, discovery, and health, mainly at the infrastructure level (networking being a Layer 4 and below focus). As a result, microservices have unmet service-level needs. A service mesh is a specialized infrastructure layer that makes service-to-service communication safe, fast, and reliable. Its operation is typically based on a container orchestrator or integration with another service discovery system. Although service meshes are frequently deployed as a separate layer on top of container orchestrators, they do not require one because control and data plane components could be deployed independently of containerized infrastructure.')),i.createElement("p",null,i.createElement(t.p,null,"As stated previously, the network is directly and critically involved in every transaction, every execution of business logic, and every request made to the application in microservices deployments. For modern, cloud-native applications, network stability and latency are top priorities. A cloud native application may be made up of hundreds of microservices, each of which could have several instances, and each of those ephemeral instances could be rescheduled by a container orchestrator as needed.")),i.createElement("p",null,i.createElement(t.p,null,"What would you want from a network that connects your microservices, given the network's criticality? You want your network to be as intelligent and resilient as possible. To improve the aggregate reliability of your cluster, you want your network to route traffic around from failures. You want to avoid overhead like high-latency routes or servers with cold caches in your network. You want your network to protect the traffic that flows between services against trivial attacks. You want your network to provide insight into service communication failures by exposing unforeseen dependencies and root causes. You want your network to let you impose policies at the granularity of service behaviors, not just at the connection level. You also don’t want to write all this logic into your application.")),i.createElement("p",null,"You want Layer 5 management. You want a services-first network. You want a service mesh!"))}var s=function(e){void 0===e&&(e={});var t=Object.assign({},(0,r.ah)(),e.components).wrapper;return t?i.createElement(t,e,i.createElement(o,e)):o(e)};function c(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}var l=n(17875),u=n(72417),d=function(e){var t=e.data,n=e.children;return i.createElement(i.Fragment,null,i.createElement(u.Z,{data:t},n))};function h(e){return i.createElement(d,e,i.createElement(s,e))}var m=function(e){var t=e.data;return i.createElement(l.Z,{title:t.mdx.frontmatter.title,image:t.mdx.frontmatter.thumbnail.publicURL})}},72417:function(e,t,n){"use strict";n.d(t,{Z:function(){return b}});var r=n(67294),i=n(71082),a=n(40156),o=n(6652),s=n(33754),c=n(85313).default.div.withConfig({displayName:"resourceSinglestyle__ResourcePageWrapper",componentId:"sc-gfz8rr-0"})(["\n    color: ",";\n    .single-resource-wrapper{\n        margin-bottom: 4rem;\n\n        h3 {\n            text-align: center;\n        }\n    }\n\n    .resource-info-block{\n        margin-top: 3rem;\n        border-bottom: 1px solid ",";\n        padding-bottom: 2rem;\n    }\n    p {\n        color: ",";\n    }\n    li {\n        color: ",";\n    }\n    .backBtn {\n        margin: 3rem auto;\n        font-weight: 600;\n        z-index: 2;\n\n        @media screen and (max-width: 62rem) {\n            display: none;\n        }\n        a{\n            display: flex;\n            color: ",";\n            &:hover{\n                color: ",";\n            }\n\n            h4 {\n                line-height: 1.75rem;\n                margin-left: 0.5rem;\n            }\n            svg {\n                font-size: 1.75rem;\n            }\n        }\n    }\n\n    .tags{\n        display: flex;\n        span{\n            font-size: 1.2rem;\n            align-self: center;\n        }\n        a{\n            color: ",";\n            margin: 0.2rem;\n            display: inline-block;\n            padding: 0.3rem 0.8rem;\n            border-radius: 0.2rem;\n            background: #F0F0F0;\n            transition: all 0.3s linear;\n            &:hover{\n                background: ",";\n                color: ",";\n            }\n        }\n        div{\n            display: inline-flex;\n            flex-wrap: wrap;\n        }\n    }\n    @media screen and (max-width: 360px){\n        .tags{\n            span{\n                position: relative;\n                top: 0.5rem;\n                align-self: flex-start;\n            }\n        }\n    }\n"],(function(e){return e.theme.text}),(function(e){return e.theme.text}),(function(e){return e.theme.text}),(function(e){return e.theme.text}),(function(e){return e.theme.primaryColor}),(function(e){return e.theme.linkColor}),(function(e){return e.theme.black}),(function(e){return e.theme.secondaryColor}),(function(e){return e.theme.white})),l=n(75472),u=n.n(l),d=n(64721),h=n.n(d);function m(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(n)return(n=n.call(e)).next.bind(n);if(Array.isArray(e)||(n=function(e,t){if(!e)return;if("string"==typeof e)return p(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return p(e,t)}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0;return function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function p(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var f=function(){function e(e,t){this.resources=e.filter((function(e){return e.fields.slug!==t})),this.currentResourceSlug=t,this.maxResources=6,this.category=null,this.tags=[]}var t=e.prototype;return t.setMaxResources=function(e){return this.maxResources=e,this},t.setCategory=function(e){return this.category=e,this},t.setTags=function(e){return this.tags=e,this},t.getResources=function(){var e=this.category,t=this.tags,n=this.resources,r=this.maxResources,i={};if(!1==!!t||0===t.length)return console.error("RelatedResourcesFactory: Tags not provided, use setTags()."),[];if(!1==!!e)return console.error("RelatedResourcesFactory: Category not provided, use setCategory()."),[];for(var a,o=function(e){return e.fields.slug},s=function(e){var t=o(e);Object.prototype.hasOwnProperty.call(i,t)||(i[t]={resource:e,points:0})},c=function(e,t){var n=o(e);e.frontmatter.category===t&&(i[n].points+=2)},l=function(e,t){var n=o(e);e.frontmatter.tags.forEach((function(e){h()(t,e)&&(i[n].points+=1)}))},d=m(n);!(a=d()).done;){var p=a.value;s(p),c(p,e),l(p,t)}var f=Object.keys(i).map((function(e){return i[e]}));return u()(f,["points"],["desc"]).splice(0,r)},e}(),v=n(78705),g=(0,a.ZP)((function(){return n.e(35575).then(n.bind(n,59434))})),y=(0,a.ZP)((function(){return Promise.all([n.e(40532),n.e(67326),n.e(18514)]).then(n.bind(n,24210))})),b=function(e){var t=e.data,n=e.children,a=t.mdx,l=a.frontmatter,u=a.fields,d=(0,i.useStaticQuery)("2848499768").allMdx.nodes,h=new f(d,u.slug).setMaxResources(6).setCategory(l.category).setTags(l.tags).getResources();return r.createElement(c,null,r.createElement(s.Z,{title:l.title,subtitle:l.subtitle,thumbnail:l.thumbnail}),r.createElement("div",{className:"single-resource-wrapper"},r.createElement(o.W2,null,n,r.createElement(g,{category:"MeshMap"}),r.createElement("div",{className:"backBtn"},r.createElement(i.Link,{to:"/resources"},r.createElement(v.O,null),r.createElement("h4",null,"All Resources"))),r.createElement(y,{resourceType:"resources",relatedResources:h,mainHead:"Related Resources",lastCardHead:"All Resources",linkToAllItems:"/resources"}))))}}}]);