"use strict";(self.webpackChunkLayer5=self.webpackChunkLayer5||[]).push([[42865],{73800:function(e,t,n){n.r(t),n.d(t,{Head:function(){return m},default:function(){return u}});var l=n(39626),r=n(67294),a=n.p+"static/control-plane-c-411b075805428ad31abc84c4d4bda0c8.webp";function o(e){var t=Object.assign({p:"p",a:"a",ul:"ul",li:"li",code:"code",pre:"pre"},(0,l.ah)(),e.components),n=t.ChapterStyle;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("ChapterStyle",!0),r.createElement(n,null,r.createElement("h2",{className:"chapter-sub-heading"},"How Linkerd handles traffic splitting"),r.createElement("a",{href:a},r.createElement("img",{src:a,width:"100%",align:"center"})),r.createElement(t.p,null,"The destination component of the control plane looks for changes in configuration of linkerd (actualized as Kubernetes Custom Resource Definitions) and afterward pushes the right config for"),r.createElement(t.p,null,"proxies to follow. As opposed to presenting its own configuration format for traffic splitting, Linkerd follows the ",r.createElement(t.a,{href:"https://smi-spec.io/"},"SMI spec"),", which plans to give a brought together, summed up setup model for service meshes (simply like ingress, CRI, and so on in Kubernetes)."),r.createElement("h2",{className:"chapter-sub-heading"}," Deploying sample application"),r.createElement(t.p,null,"We will be deploying ",r.createElement(t.a,{href:"https://istio.io/latest/docs/examples/bookinfo/"},"istio's bookinfo application")," for this part of the demo"),r.createElement(t.p,null,"Use meshery to deploy the bookinfo application :"),r.createElement(t.ul,null,"\n",r.createElement(t.li,null,"In Meshery, navigate to the Linkerd adapter's management page from the left nav menu."),"\n",r.createElement(t.li,null,"On the Linkerd adapter's management page, please enter ",r.createElement(t.code,null,"default")," in the ",r.createElement(t.code,null,"Namespace")," field."),"\n",r.createElement(t.li,null,"Then, click the (+) icon on the ",r.createElement(t.code,null,"Sample Application")," card and select ",r.createElement(t.code,null,"Bookinfo Application")," from the list."),"\n"),r.createElement(t.p,null,"OR..."),r.createElement(t.ul,null,"\n",r.createElement(t.li,null,"Download the ",r.createElement(t.a,{href:"https://raw.githubusercontent.com/layer5io/linkerd-service-mesh-workshop/master/lab-7/sample/book-info.yaml"},"./sample/bookinfo.yaml")),"\n",r.createElement(t.li,null,"Inject linkerd into the sample application."),"\n"),r.createElement(t.pre,null,r.createElement(t.code,{className:"language-sh"},"linkerd inject ./sample/bookinfo.yaml | kubectl apply -f -\n")),r.createElement(t.p,null,"This will give you the if the Linkerd injection was successful or not."),r.createElement(t.pre,null,r.createElement(t.code,{className:"language-sh"},"linkerd stat deploy\n")),r.createElement(t.p,null,"You will see the following services running in your cluster"),r.createElement(t.pre,null,r.createElement(t.code,{className:"language-sh"}," kubectl get svc\n    NAME          TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE\n    details       ClusterIP   10.96.115.62    <none>        9080/TCP   13m\n    kubernetes    ClusterIP   10.96.0.1       <none>        443/TCP    7h56m\n    productpage   ClusterIP   10.109.31.20    <none>        9080/TCP   13m\n    ratings       ClusterIP   10.101.57.168   <none>        9080/TCP   13m\n    reviews       ClusterIP   10.105.52.139   <none>        9080/TCP   13m\n")),r.createElement(t.p,null,"You can access the producpage by port-forwarding"),r.createElement(t.pre,null,r.createElement(t.code,{className:"language-sh"},"    kubectl port-forward svc/productpage 9080:9080\n")),r.createElement(t.p,null,"Checking localhost:9080 would show you a product page, with a list of reviews on the right. Those reviews are being loaded from the reviews service which is backed by the 3 reviews pods. The requests to the reviews service are randomly sent to one of the 3 review pods, as they represent different versions of this service."),r.createElement(t.p,null,"The three different versions provide different output:"),r.createElement(t.ul,null,"\n",r.createElement(t.li,null,"v1 with No stars"),"\n",r.createElement(t.li,null,"v2 with Orange stars"),"\n",r.createElement(t.li,null,"v3 with Black stars"),"\n"),r.createElement(t.p,null,"We will have reviews service only split traffic between v1 and v2 of the application."),r.createElement(t.p,null,"In Linkerd’s approach to traffic splitting, services are used as the core primitives. Hence we need to create two new services corresponding to v1 & v2 pods."),r.createElement(t.pre,null,r.createElement(t.code,{className:"language-sh"},"kubectl apply -f ./sample/service.yaml\n")),r.createElement(t.p,null,"There are two new services created"),r.createElement(t.pre,null,r.createElement(t.code,{className:"language-sh"},"  kubectl get svc\n    NAME          TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGE\n    details       ClusterIP   10.96.115.62     <none>        9080/TCP   35m\n    kubernetes    ClusterIP   10.96.0.1        <none>        443/TCP    8h\n    productpage   ClusterIP   10.109.31.20     <none>        9080/TCP   35m\n    ratings       ClusterIP   10.101.57.168    <none>        9080/TCP   35m\n    reviews       ClusterIP   10.105.52.139    <none>        9080/TCP   35m\n    reviews-v2    ClusterIP   10.106.174.219   <none>        9080/TCP   7s\n    reviews-v3    ClusterIP   10.96.125.224    <none>        9080/TCP   7s\n")),r.createElement(t.p,null,"Now, let's apply traffic-split CRD from SMI :"),r.createElement(t.pre,null,r.createElement(t.code,{className:"language-sh"},"apiVersion: split.smi-spec.io/v1alpha1\nkind: TrafficSplit\nmetadata:\n  name: reviews-split\nspec:\n  service: reviews\n  backends:\n    - service: reviews-v1\n      weight: 500m\n    - service: reviews-v2\n      weight: 500m\n")),r.createElement(t.p,null,"This tells Linkerd’s control plane that whenever there are requests to the reviews service, to split them across the ",r.createElement(t.code,null,"reviews-v1")," and ",r.createElement(t.code,null,"reviews-v2")," based on the weights provided."),r.createElement(t.p,null,"If we now go back to our product page, we can only see the reviews with orange or no stars appear on each refresh."),r.createElement("h2",{className:"chapter-sub-heading"}," Cleanup"),r.createElement(t.pre,null,r.createElement(t.code,{className:"language-sh"},"kubectl delete trafficsplit/reviews-split\nkubectl delete -f ./sample/service.yaml\n")),r.createElement(t.ul,null,"\n",r.createElement(t.li,null,"Remove the bookinfo application from the ",r.createElement(t.code,null,"Meshery Dashboard")," by clicking on the ",r.createElement(t.code,null,"trash icon")," in the ",r.createElement(t.code,null,"sample application")," card on the linkerd adapters' page."),"\n"))}var s=function(e){void 0===e&&(e={});var t=Object.assign({},(0,l.ah)(),e.components).wrapper;return t?r.createElement(t,e,r.createElement(o,e)):o(e)};var c=n(17875),i=n(5802),p=function(e){var t=e.data,n=e.location,l=t.TOC.nodes.sort((function(e,t){var n,l;return(null!==(n=e.frontmatter)&&void 0!==n&&n.order?e.frontmatter.order:100)-(null!==(l=t.frontmatter)&&void 0!==l&&l.order?t.frontmatter.order:100)}));return r.createElement(r.Fragment,null,r.createElement(i.Z,{chapterData:t.chapter,TOCData:l,courseData:t.course.nodes[0],location:n,serviceMeshesList:t.serviceMeshesList.nodes}))};function u(e){return r.createElement(p,e,r.createElement(s,e))}var m=function(e){var t=e.data;return r.createElement(c.Z,{title:t.chapter.frontmatter.chapterTitle,canonical:"https://layer5.io/learn/learning-paths"})}}}]);