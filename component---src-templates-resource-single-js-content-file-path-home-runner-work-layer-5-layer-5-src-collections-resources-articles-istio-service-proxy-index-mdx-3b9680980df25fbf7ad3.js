(self.webpackChunkLayer5=self.webpackChunkLayer5||[]).push([[50593],{78705:function(e,t,n){var o=n(15301).w_;e.exports.O=function(e){return o({tag:"svg",attr:{viewBox:"0 0 512 512"},child:[{tag:"path",attr:{d:"M256 48C141.1 48 48 141.1 48 256s93.1 208 208 208 208-93.1 208-208S370.9 48 256 48zm43.4 289.1c7.5 7.5 7.5 19.8 0 27.3-3.8 3.8-8.7 5.6-13.6 5.6s-9.9-1.9-13.7-5.7l-94-94.3c-6.9-7.6-6.7-19.3.6-26.6l95.4-95.7c7.5-7.5 19.7-7.6 27.3 0 7.5 7.5 7.6 19.7 0 27.3l-81.9 81 79.9 81.1z"}}]})(e)}},45747:function(e,t,n){"use strict";n.r(t),n.d(t,{Head:function(){return d},default:function(){return u}});var o=n(39626),i=n(67294);function a(e){var t=Object.assign({p:"p",pre:"pre",code:"code"},(0,o.ah)(),e.components),n=t.ResourcesWrapper;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("ResourcesWrapper",!0),i.createElement(n,null,i.createElement("h3",null,"What Is a Service Proxy?"),i.createElement("p",null,i.createElement(t.p,null,"A service proxy is a client-side mediator that handles requests for a service. The service proxy allows applications to send and receive messages as method calls via a channel. Service proxy connections can be created as needed or persist open connections to facilitate pooling. Applications are oblivious to the data plane's existence. As applications conduct service-to-service calls, service proxies are transparently inserted. Inbound (ingress) and outbound (egress) cluster network traffic are handled by data planes. Whether traffic is entering the mesh (ingressing) or leaving the mesh (egressing), application service traffic is directed first to the service proxy for handling. In Istio, traffic is transparently intercepted using iptables rules and redirected to the service proxy.")),i.createElement("p",null,i.createElement(t.p,null,"Remember that Pilot configures traffic policy and service proxies implement it. The data plane is a collection of service proxies. Service proxies are responsible for health checks, routing, load balancing, authentication, authorization, and the production of observable signals by intercepting every packet in the request. As the service may change from location to location, proxies provide indirection so that clients may point to the same location (e.g., proxy.example.com), representing a permanent reference. They add resilience to distributed systems.")),i.createElement("h3",null,"Envoy Proxy Overview"),i.createElement("p",null,"The versatile and performant Envoy has evolved as an open source, application-level service proxy, living up to its tagline as the universal data plane API. Lyft developed Envoy in order to solve major distributed systems problems. Envoy has had broad reuse and has been integrated into the cloud native ecosystem."),i.createElement("h4",null,"Why Envoy?"),i.createElement("p",null,i.createElement(t.p,null,"Envoy was originally intended to be used as an edge proxy rather than a sidecar. Envoy transitioned to the sidecar pattern over time.\nThe concept of hot reloads vs. hot restarts was at the center of the decision for the Istio project to leverage Envoy. Envoy's runtime configuration has always been API-driven, allowing it to drain and hot reload its own process with an old configuration with a new process and new configuration (displacing itself). Envoy achieves hot reloading of its processes by shared memory and communication through a Unix Domain Socket (UDS), in a manner that resembles GitHub's tool for zero-downtime HAProxy reloads.\nAdditionally, and uniquely, Envoy offers an Aggregated Discovery Service (ADS) for delivering the data for each xDS API.")),i.createElement("h4",null,"HTTP/2 and gRPC"),i.createElement("p",null,i.createElement(t.p,null,"Envoy stood apart from other proxies at the time because of its early support for HTTP/2 and gRPC. HTTP/2 significantly improves on HTTP/1.1 in that HTTP/2 enables request multiplexing over a single TCP connection. Proxies that support HTTP/2 benefit from the reduced overhead of combining several connections into a single one. HTTP/2 allows clients to send numerous parallel requests and load resources preemptively using server-push.")),i.createElement("p",null,i.createElement(t.p,null,"Envoy is HTTP/1.1 and HTTP/2 compatible, including proxying compatibility for both downstream and upstream protocols. This means Envoy can accept incoming HTTP/2 connections and proxy them to upstream HTTP/2 clusters, but it can also take HTTP/1.1 connections and proxy them to HTTP/2 clusters (and vice-versa).")),i.createElement("p",null,i.createElement(t.p,null,"gRPC is an RPC protocol that uses protocol buffers on top of HTTP/2. Envoy supports gRPC natively (over HTTP/2) and can also bridge an HTTP/1.1 client to gRPC. Envoy has the ability to operate as a gRPC-JSON transcoder. The gRPC-JSON transcoder functionality allows a client to send HTTP/1.1 requests with a JSON payload to Envoy, which translates the request into the corresponding gRPC call and subsequently translates the response message back into JSON. These are powerful capabilities (and challenging to execute correctly), which set Envoy apart from other service proxies.")),i.createElement("h3",null,"Envoy in Istio"),i.createElement("p",null,i.createElement(t.p,null,"As an out of process proxy, Envoy transparently forms the base unit of the mesh. Akin to proxies in other service meshes, it is the workhorse of Istio. Istio deploys Envoy sidecarred to application services.\nIdentified as ",i.createElement("code",null,"istio-proxy")," in deployment files, Envoy does not require root privileges to run, but runs as user 1337 (non root).")),i.createElement("h3",null,"Sidecar Injection (or Sidecarring)"),i.createElement("p",null,i.createElement(t.p,null,"There are two steps to adding a service proxy: sidecar injection and network capture. Sidecar injection is the method of adding a proxy to a given application. Network capture is the method of directing inbound traffic to the proxy (instead of the application) and outbound traffic to the proxy (instead of directly back to the client or directly to subsequent upstream application services).")),i.createElement("h4",null,"Manual Sidecar Injection"),i.createElement("p",null,i.createElement(t.p,null,i.createElement("code",null,"Istioctl")," can be used to manually inject the Envoy sidecar definition into Kubernetes manifests manually. Use ",i.createElement("code",null,"istioctl"),"’s ",i.createElement("code",null,"kube-inject")," capability to manually inject the sidecar into deployment manifests by manipulating yaml.")),i.createElement(t.pre,null,i.createElement(t.code,null,"$ istioctl kube-inject -f samples/sleep/sleep.yaml | kubectl apply -f -\n")),i.createElement("p",null,i.createElement(t.p,null,"You can update Kubernetes specifications on-the-fly at the time of applying them to Kubernetes for scheduling. Alternatively, you might use the ",i.createElement("code",null,"istioctl kube-inject")," utility like so:")),i.createElement(t.pre,null,i.createElement(t.code,null,"$ kubectl apply -f <(istioctl kube-inject -f <resource.yaml>)\n")),i.createElement("p",null,i.createElement(t.p,null,"If you don’t have the source manifests available, you can update an existing Kubernetes deployment to bring its services onto the mesh:")),i.createElement(t.pre,null,i.createElement(t.code,null,"$ kubectl get deployment -o yaml | istioctl kube-inject -f - | kubectl apply -f -\n")),i.createElement("p",null,i.createElement(t.p,null,"Let's look at an example of an existing application being onboarded onto the mesh. Let's use a freshly installed copy of BookInfo as an example of a Kubernetes application that isn't deployed on the service mesh yet. We'll start with exploring BookInfo's pods.")),i.createElement(t.pre,null,i.createElement(t.code,null,"$ kubectl get pods\nNAME                              READY   STATUS    RESTARTS   AGE\ndetails-v1-69658dcf78-nghss       1/1     Running   0          43m\nproductpage-v1-6b6798cb84-nzfhd   1/1     Running   0          43m\nratings-v1-6f97d68b6-v6wj6        1/1     Running   0          43m\nreviews-v1-7c98dcd6dc-b974c       1/1     Running   0          43m\nreviews-v2-6677766d47-2qz2g       1/1     Running   0          43m\nreviews-v3-79f9bcc54c-sjndp       1/1     Running   0          43m\n")),i.createElement("p",null,i.createElement(t.p,null,"The atomic unit of deployment in Kubernetes is a Pod.  Since a Pod is a collection of containers, it can be one or more containers deployed atomically together. In our example, we can see that each of BookInfo's pods is only executing one container. When ",i.createElement("code",null,"istioctl kube-inject")," is run against  on BookInfo's manifests, it adds another container to the Pod specification but does not deploy anything yet.")),i.createElement("p",null,i.createElement(t.p,null,i.createElement("code",null,"istioctl kube-inject")," supports modification of Pod-based Kubernetes objects (Job, DaemonSet, ReplicaSet, Pod and Deployment) that may be embedded into long yaml files containing other Kubernetes objects. ",i.createElement("code",null,"Istioctl kube-inject")," will parse the other Kubernetes objects without modification. Unsupported resources are left unmodified so it is safe to run kube-inject over a single file that contains multiple Service, ConfigMap, Deployment, etc. definitions for a complex application. It is best to do this when the resource is initially created.")),i.createElement("p",null,i.createElement(t.p,null,"In order to onboard this existing application, we can execute ",i.createElement("code",null,"istioctl kube-inject")," against each Deployment and have a rolling update of that Deployment initiated by Kubernetes as shown below. Let’s start with the ",i.createElement("code",null,"productpage")," service.")),i.createElement(t.pre,null,i.createElement(t.code,null,"$ kubectl get deployment productpage-v1 -o yaml | istioctl kube-inject -f - | kubectl apply -f -\ndeployment.extensions/productpage-v1 configured\n")),i.createElement("p",null,i.createElement(t.p,null,"We now notice that the productpage pod has grown to two containers when we look at the BookInfo pods again. Istio’s sidecar has been successfully injected. The rest of BookInfo’s application services need to be onboarded in order for BookInfo as an application to work.")),i.createElement(t.pre,null,i.createElement(t.code,null,"$ kubectl get pods\nNAME                              READY   STATUS    RESTARTS   AGE\ndetails-v1-69658dcf78-nghss       1/1     Running   0          45m\nproductpage-v1-64647d4c5f-z95dl   2/2     Running   0          64s\nratings-v1-6f97d68b6-v6wj6        1/1     Running   0          45m\nreviews-v1-7c98dcd6dc-b974c       1/1     Running   0          45m\nreviews-v2-6677766d47-2qz2g       1/1     Running   0          45m\nreviews-v3-79f9bcc54c-sjndp       1/1     Running   0          45m\n")),i.createElement("p",null,i.createElement(t.p,null,"You may choose to do this manual injection operation once and persist the new manifest file with istio-proxy (Envoy) inserted instead of ad-hoc onboarding of a running application. You can create a persistent version of the sidecar injected deployment outputting the results of ",i.createElement("code",null,"istioctl kube-inject")," to a file. As Istio evolves the default sidecar configuration is subject to change.")),i.createElement(t.pre,null,i.createElement(t.code,null,"$ istioctl kube-inject -f deployment.yaml -o deployment-injected.yaml\n")),i.createElement(t.p,null,"Or like so:"),i.createElement(t.pre,null,i.createElement(t.code,null,"$ istioctl kube-inject -f deployment.yaml > deployment-injected.yaml\n")),i.createElement("h4",null,"Ad-hoc Sidecarring"),i.createElement("p",null,i.createElement(t.p,null,"Sidecar injection is responsible for configuring network capture. Injection and network capture can be selectively applied to enable incremental adoption of Istio. Using the BookInfo sample application as an example, let’s take the ",i.createElement("code",null,"productpage")," service as the external-facing service and selectively remove this service (and just this service out of the set of four) from the service mesh. Let's start by checking for the presence of its sidecarred service proxy.")),i.createElement(t.pre,null,i.createElement(t.code,null,'$ kubectl get pods productpage-8459b4f9cf-tfblj -o jsonpath="{.spec.containers[*].image}"\nlayer5/istio-bookinfo-productpage:v1 docker.io/istio/proxyv2:1.0.5\n')),i.createElement("p",null,i.createElement(t.p,null,"As you can see, productpage container is our application container, while the istio/proxy is the service proxy (Envoy) that Istio injected into the pod. To manually onboard and offboard a deployment onto and off of the service mesh, you can manipulate annotation within its Kubernetes Deployment specification.")),i.createElement(t.pre,null,i.createElement(t.code,null,'$ kubectl patch deployment nginx --type=json --patch=\'[{"op": "add", "path": "/spec/template/metadata/annotations", "value": {"sidecar.istio.io/inject": "false"}}]\'\ndeployment.extensions/productpage-v1 patched\n')),i.createElement("p",null,i.createElement(t.p,null,"On opening your browser to the ",i.createElement("code",null,"productpage")," application, and you’ll find that it is still being served through Istio’s Ingress Gateway, but that its pods no longer have sidecars. Hence, the productpage app has been removed from the mesh.")),i.createElement(t.pre,null,i.createElement(t.code,null,"UNAVAILABLE:upstream connect error or disconnect/reset before headers\n")),i.createElement("h4",null,"Automatic Sidecar Injection"),i.createElement("p",null,i.createElement(t.p,null,"No code change to receive much more visibility into how your services are behaving and how they are being interacted gives Istio a magical feeling once your services are on the mesh. Automatic sidecar injection is the magical feeling you get as you go to onramp your services.Not only does automatic sidecar injection eliminate the need to alter your code, but it also eliminates the need to change your Kubernetes manifests. Automatic sidecar injection in Kubernetes relies on mutating admission webhooks. The ",i.createElement("code",null,"istio-sidecar-injector")," is added as a mutating webhook configuration resource when Istio is installed on Kubernetes.")),i.createElement(t.pre,null,i.createElement(t.code,null,"$ kubectl get mutatingwebhookconfigurations\nNAME                                    CREATED AT\nistio-sidecar-injector                  2019-04-18T16:35:03Z\nlinkerd-proxy-injector-webhook-config   2019-04-18T16:48:49Z\n")),i.createElement(t.pre,null,i.createElement(t.code,null,'$ kubectl get mutatingwebhookconfigurations istio-sidecar-injector -o yaml\n\napiVersion: admissionregistration.k8s.io/v1beta1\nkind: MutatingWebhookConfiguration\nmetadata:\n  creationTimestamp: "2019-04-18T16:35:03Z"\n  generation: 2\n  labels:\n    app: sidecarInjectorWebhook\n    chart: sidecarInjectorWebhook\n    heritage: Tiller\n    release: istio\n  name: istio-sidecar-injector\n  resourceVersion: "192908"\n  selfLink: /apis/admissionregistration.k8s.io/v1beta1/mutatingwebhookconfigurations/istio-sidecar-injector\n  uid: eaa85688-61f7-11e9-a968-00505698ee31\nwebhooks:\n- admissionReviewVersions:\n  - v1beta1\n  clientConfig:\n    caBundle: <redacted>\n    service:\n      name: istio-sidecar-injector\n      namespace: istio-system\n      path: /inject\n  failurePolicy: Fail\n  name: sidecar-injector.istio.io\n  namespaceSelector:\n    matchLabels:\n      istio-injection: enabled\n  rules:\n  - apiGroups:\n    - ""\n    apiVersions:\n    - v1\n    operations:\n    - CREATE\n    resources:\n    - pods\n    scope: \'*\'\n  sideEffects: Unknown\n  timeoutSeconds: 30\n')),i.createElement("p",null,i.createElement(t.p,null,"If the namespace contains the ",i.createElement("code",null,"istio-injection=enabled")," label, Kubernetes will transmit all Pod creation events to the ",i.createElement("code",null,"istio-sidecar-injector")," service (in the istio-system namespace) if this mutating webhook is registered. The injector service will then modify the PodSpec to include two more containers, one for the init-container to configure traffic rules and the other for istio-proxy (Envoy) to perform proxying.  The sidecar injector service uses a template to add these two additional containers; the template may be found in the ",i.createElement("code",null,"istio-sidecar-injector configmap"),".")),i.createElement("p",null,i.createElement(t.p,null,"Kubernetes lifecycle allows customization of resources before they are committed to the etcd store, the ‘source of truth’ for Kubernetes configuration. When an individual Pod is created (either via kubectl or a Deployment resource), it goes through this same lifecycle, hitting mutating admission webhooks which modify the pod before it actually gets applied.")),i.createElement("h4",null,"Kubernetes Labels"),i.createElement("p",null,i.createElement(t.p,null,"Automatic sidecar injection relies on labels to identify which pods to inject Istio’s service proxy and initialize as pod on the data plane. Kubernetes objects, like pods and namespaces, can have user-defined labels attached to them. Labels are essentially ",i.createElement("code",null,"key:value")," pairs like you finding in other systems that support the concept of tags. Webhook Admission controller relies on labels to select the namespaces they apply to. Istio-injection is the specific label that Istio uses. Familiarize by labeling the default namespace with ",i.createElement("code",null,"istio-injection=enabled"),":")),i.createElement(t.pre,null,i.createElement(t.code,null,"$ kubectl label namespace default istio-injection=enabled\n")),i.createElement("p",null,"Confirm which namespaces have the istio-injection label associated:"),i.createElement(t.pre,null,i.createElement(t.code,null,"$ kubectl get namespace -L istio-injection\nNAME           STATUS    AGE       ISTIO-INJECTION\ndefault        Active    1h        enabled\nDocker         Active    1h        enabled\nistio-system   Active    1h        disabled\nkube-public    Active    1h        \nkube-system    Active    1h\n")),i.createElement("p",null,i.createElement(t.p,null,"Notice that only the ",i.createElement("code",null,"istio-system")," namespace has the ",i.createElement("code",null,"istio-injection")," label assigned. By virtue of having the ",i.createElement("code",null,"istio-injection")," label and its value set to disabled, the ",i.createElement("code",null,"istio-system")," namespace will not have service proxies automatically injected into their pods upon deployment. This does not mean that pods in this namespace cannot have service proxies. It just means that service proxies won’t be automatically injected.")),i.createElement("p",null,i.createElement(t.p,null,"One caveat to watch out for, when using the ",i.createElement("code",null,"namespaceSelector"),", make sure that the namespace(s) you are selecting really has the label you are using. Keep in mind that the built-in namespaces like default and ",i.createElement("code",null,"kube-system")," don’t have labels out of the box.")),i.createElement("p",null,"Conversely, the namespace in the metadata section is the actual name of the namespace, not a label:"),i.createElement(t.pre,null,i.createElement(t.code,null,"apiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: test-network-policy\n  namespace: default\nspec:\n...\n")),i.createElement("h4",null,"Kubernetes Init Containers"),i.createElement("p",null,i.createElement(t.p,null,"Very similar to cloud-init for those familiar with VM provisioning, init containers in Kubernetes allows you to run temporary containers to perform a task before engaging your primary container(s). Init containers are Init containers in Kubernetes allow you to run temporary containers to execute a task before activating your principal container, comparable to cloud-init for people acquainted with VM provisioning (s). Init containers are frequently used for provisioning operations such as asset bundling, database migration, and cloning a git repository onto a volume. In the instance of Istio, init containers are used to set up network filters - iptables - that control traffic flow. used to perform provisioning tasks like bundling assets, performing database migration, or clone a git repository into a volume. In Istio’s case, init containers are used to setup network filters - iptables to control the flow of traffic.")))}var r=function(e){void 0===e&&(e={});var t=Object.assign({},(0,o.ah)(),e.components).wrapper;return t?i.createElement(t,e,i.createElement(a,e)):a(e)};var l=n(17875),s=n(72417),c=function(e){var t=e.data,n=e.children;return i.createElement(i.Fragment,null,i.createElement(s.Z,{data:t},n))};function u(e){return i.createElement(c,e,i.createElement(r,e))}var d=function(e){var t=e.data;return i.createElement(l.Z,{title:t.mdx.frontmatter.title,image:t.mdx.frontmatter.thumbnail.publicURL})}},72417:function(e,t,n){"use strict";n.d(t,{Z:function(){return v}});var o=n(67294),i=n(71082),a=n(40156),r=n(6652),l=n(33754),s=n(85313).default.div.withConfig({displayName:"resourceSinglestyle__ResourcePageWrapper",componentId:"sc-gfz8rr-0"})(["\n    color: ",";\n    .single-resource-wrapper{\n        margin-bottom: 4rem;\n\n        h3 {\n            text-align: center;\n        }\n    }\n\n    .resource-info-block{\n        margin-top: 3rem;\n        border-bottom: 1px solid ",";\n        padding-bottom: 2rem;\n    }\n    p {\n        color: ",";\n    }\n    li {\n        color: ",";\n    }\n    .backBtn {\n        margin: 3rem auto;\n        font-weight: 600;\n        z-index: 2;\n\n        @media screen and (max-width: 62rem) {\n            display: none;\n        }\n        a{\n            display: flex;\n            color: ",";\n            &:hover{\n                color: ",";\n            }\n\n            h4 {\n                line-height: 1.75rem;\n                margin-left: 0.5rem;\n            }\n            svg {\n                font-size: 1.75rem;\n            }\n        }\n    }\n\n    .tags{\n        display: flex;\n        span{\n            font-size: 1.2rem;\n            align-self: center;\n        }\n        a{\n            color: ",";\n            margin: 0.2rem;\n            display: inline-block;\n            padding: 0.3rem 0.8rem;\n            border-radius: 0.2rem;\n            background: #F0F0F0;\n            transition: all 0.3s linear;\n            &:hover{\n                background: ",";\n                color: ",";\n            }\n        }\n        div{\n            display: inline-flex;\n            flex-wrap: wrap;\n        }\n    }\n    @media screen and (max-width: 360px){\n        .tags{\n            span{\n                position: relative;\n                top: 0.5rem;\n                align-self: flex-start;\n            }\n        }\n    }\n"],(function(e){return e.theme.text}),(function(e){return e.theme.text}),(function(e){return e.theme.text}),(function(e){return e.theme.text}),(function(e){return e.theme.primaryColor}),(function(e){return e.theme.linkColor}),(function(e){return e.theme.black}),(function(e){return e.theme.secondaryColor}),(function(e){return e.theme.white})),c=n(75472),u=n.n(c),d=n(64721),p=n.n(d);function m(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(n)return(n=n.call(e)).next.bind(n);if(Array.isArray(e)||(n=function(e,t){if(!e)return;if("string"==typeof e)return h(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return h(e,t)}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var o=0;return function(){return o>=e.length?{done:!0}:{done:!1,value:e[o++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function h(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}var f=function(){function e(e,t){this.resources=e.filter((function(e){return e.fields.slug!==t})),this.currentResourceSlug=t,this.maxResources=6,this.category=null,this.tags=[]}var t=e.prototype;return t.setMaxResources=function(e){return this.maxResources=e,this},t.setCategory=function(e){return this.category=e,this},t.setTags=function(e){return this.tags=e,this},t.getResources=function(){var e=this.category,t=this.tags,n=this.resources,o=this.maxResources,i={};if(!1==!!t||0===t.length)return console.error("RelatedResourcesFactory: Tags not provided, use setTags()."),[];if(!1==!!e)return console.error("RelatedResourcesFactory: Category not provided, use setCategory()."),[];for(var a,r=function(e){return e.fields.slug},l=function(e){var t=r(e);Object.prototype.hasOwnProperty.call(i,t)||(i[t]={resource:e,points:0})},s=function(e,t){var n=r(e);e.frontmatter.category===t&&(i[n].points+=2)},c=function(e,t){var n=r(e);e.frontmatter.tags.forEach((function(e){p()(t,e)&&(i[n].points+=1)}))},d=m(n);!(a=d()).done;){var h=a.value;l(h),s(h,e),c(h,t)}var f=Object.keys(i).map((function(e){return i[e]}));return u()(f,["points"],["desc"]).splice(0,o)},e}(),g=n(78705),y=(0,a.ZP)((function(){return n.e(35575).then(n.bind(n,59434))})),b=(0,a.ZP)((function(){return Promise.all([n.e(40532),n.e(67326),n.e(18514)]).then(n.bind(n,24210))})),v=function(e){var t=e.data,n=e.children,a=t.mdx,c=a.frontmatter,u=a.fields,d=(0,i.useStaticQuery)("2848499768").allMdx.nodes,p=new f(d,u.slug).setMaxResources(6).setCategory(c.category).setTags(c.tags).getResources();return o.createElement(s,null,o.createElement(l.Z,{title:c.title,subtitle:c.subtitle,thumbnail:c.thumbnail}),o.createElement("div",{className:"single-resource-wrapper"},o.createElement(r.W2,null,n,o.createElement(y,{category:"MeshMap"}),o.createElement("div",{className:"backBtn"},o.createElement(i.Link,{to:"/resources"},o.createElement(g.O,null),o.createElement("h4",null,"All Resources"))),o.createElement(b,{resourceType:"resources",relatedResources:p,mainHead:"Related Resources",lastCardHead:"All Resources",linkToAllItems:"/resources"}))))}}}]);