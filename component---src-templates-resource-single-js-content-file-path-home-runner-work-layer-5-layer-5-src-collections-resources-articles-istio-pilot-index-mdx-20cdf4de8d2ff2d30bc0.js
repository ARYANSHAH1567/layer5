(self.webpackChunkLayer5=self.webpackChunkLayer5||[]).push([[73554],{78705:function(e,t,n){var o=n(15301).w_;e.exports.O=function(e){return o({tag:"svg",attr:{viewBox:"0 0 512 512"},child:[{tag:"path",attr:{d:"M256 48C141.1 48 48 141.1 48 256s93.1 208 208 208 208-93.1 208-208S370.9 48 256 48zm43.4 289.1c7.5 7.5 7.5 19.8 0 27.3-3.8 3.8-8.7 5.6-13.6 5.6s-9.9-1.9-13.7-5.7l-94-94.3c-6.9-7.6-6.7-19.3.6-26.6l95.4-95.7c7.5-7.5 19.7-7.6 27.3 0 7.5 7.5 7.6 19.7 0 27.3l-81.9 81 79.9 81.1z"}}]})(e)}},80502:function(e,t,n){"use strict";n.r(t),n.d(t,{Head:function(){return d},default:function(){return u}});var o=n(39626),r=n(67294);function i(e){var t=Object.assign({p:"p",pre:"pre",code:"code"},(0,o.ah)(),e.components),n=t.ResourcesWrapper;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("ResourcesWrapper",!0),r.createElement(n,null,r.createElement("p",null,r.createElement(t.p,null,"This article covers Istio's Pilot, its basic model, the sources of configuration it consumes to produce a model of the mesh, how it uses that model of the mesh to push configuration to Envoys, how to debug it, and how to understand the transformation Pilot performs from Istio configuration to Envoy's. With this knowledge, you should be able to debug and resolve the vast majority of issues that new and intermediate Istio users encounter.")),r.createElement("p",null,r.createElement(t.p,null,"In an Istio deployment, Pilot is in charge of programming the data plane, ingress and egress gateways, and service proxies. Pilot models a deployment environment by combining Istio configuration from Galley  with service information from a service registry, such as the Kubernetes API server or Consul. Pilot utilises this model to produce data plane configuration and pushes it out to the fleet of service proxies that are connected to it.")),r.createElement("h3",null,"Configuring Pilot"),r.createElement("p",null,r.createElement(t.p,null,"Let's look at the surface area of Pilot's configuration to understand better all aspects of the mesh that concerns it. As we process this, keep in mind that Pilot's dependency on Galley for the underlying platform and environment information will grow as the Istio project progresses. Pilot has three primary sources of configuration:")),r.createElement("h4",null,"Mesh Configuration"),r.createElement("p",null,r.createElement(t.p,null,"Mesh configuration is a set of global configuration that is static for the installation of the mesh. Mesh configuration is split over three API objects:")),r.createElement("ol",null,r.createElement("li",null,"MeshConfig (",r.createElement("code",null,"mesh.istio.io/v1alpha1.MeshConfig"),") - MeshConfig allows you to configure how Istio components communicate with one another, where configuration sources are located, etc."),r.createElement("li",null,"ProxyConfig (",r.createElement("code",null,"mesh.istio.io/v1alpha1.ProxyConfig"),") - ProxyConfig tracks where Envoy's bootstrap configuration is located, which ports to bind to, and other options concerned with initialising Envoy."),r.createElement("li",null,"MeshNetworks (",r.createElement("code",null,"mesh.istio.io/v1alpha1.MeshNetworks"),") - MeshNetworks is a collection of networks across which the mesh is deployed, together with the addresses of each network's ingress gateways.")),r.createElement("p",null,r.createElement(t.p,null,"MeshConfig is generally used to define whether policy and/or telemetry are enabled, where to load configuration and locality-based load balancing settings. The exhaustive set of concerns that MeshConfig contains is listed below:")),r.createElement("ul",null,r.createElement("li",null,r.createElement(t.p,null,"How to user Mixer?"),r.createElement("ul",null,r.createElement("li",null,"The addresses of the policy and telemetry servers"),r.createElement("li",null,"Whether policy checks are enabled at runtime"),r.createElement("li",null,"Whether to fail open or closed when Mixer Policy is inaccessible or returns an error"),r.createElement("li",null,"Whether to perform policy checks on the client side."),r.createElement("li",null,"Whether to use session affinity to target the same Mixer Telemetry instance. Session affinity is always enabled for Mixer Policy (performance of the system relies on it!)"))),r.createElement("li",null,r.createElement(t.p,null,"How to configure service proxies for listening?"),r.createElement("ul",null,r.createElement("li",null,"The ports to bind to to accept traffic (i.e. the port IPTables redirects to) and to accept HTTP PROXY requests"),r.createElement("li",null,"TCP connection timeout and keepalive settings"),r.createElement("li",null,"Access log format, output file, and encoding (JSON or text)"),r.createElement("li",null,"Whether to allow all outbound traffic, or restrict outbound traffic to only services Pilot knows about"),r.createElement("li",null,"Where to listen for secrets from Citadel (the SDS API), and how to bootstrap trust (in environments with local machine tokens)"))),r.createElement("li",null,"Whether to support Kubernetes Ingress resources"),r.createElement("li",null,"The set of configuration sources for all Istio components (e.g. the local file system, or Galley), and how to communicate with them (the address, whether to use TLS or not, which secrets, etc)"),r.createElement("li",null,"Locality-based load balancing settings—configuration about failover and traffic splits between zones and regions.")),r.createElement("p",null,"ProxyConfig is mostly used for customising bootstrap settings for Envoy. The exhaustive set of concerns that ProxyConfig contains is the following:"),r.createElement("ul",null,r.createElement("li",null,"The location of the file with Envoy’s bootstrap configuration, as well as the location of the Envoy binary itself"),r.createElement("li",null,"The location of the trace collector (i.e. where to send trace data)"),r.createElement("li",null,"Shutdown settings (both connection draining and hot restart)"),r.createElement("li",null,"The location of Envoy’s xDS server (Pilot) and how to communicate with it"),r.createElement("li",null,"Envoy’s service cluster, meaning the name of the service this Envoy is sidecar for"),r.createElement("li",null,"Which ports to host the proxy’s admin server and statsd listener"),r.createElement("li",null,"Envoy’s concurrency (number of worker threads)"),r.createElement("li",null,"Connection timeout settings"),r.createElement("li",null,"How Envoy binds the socket to intercept traffic (either via IPTables REDIRECT or TPROXY)")),r.createElement("p",null,r.createElement(t.p,null,"MeshNetworks defines a collection of named networks, the method for sending traffic into those networks (ingress), and their locality. A CIDR range or a set of endpoints returned by a service registry define each network (e.g. the Kubernetes API server). The API object ServiceEntry, which is used to define services in Istio, has a set of endpoints. A ServiceEntry can represent a service that is deployed across multiple networks(or clusters) by labelling each endpoint with a network.")),r.createElement("p",null,r.createElement(t.p,null,"Most values in MeshConfig cannot be updated dynamically, therefore the control plane must be restarted for them to take effect. Similarly, updates to values in ProxyConfig only occur when Envoy is redeployed (e.g., in Kubernetes, when the pod is rescheduled). MeshNetworks can be dynamically upgraded at runtime without requiring any control plane components to be restarted.")),r.createElement("p",null,r.createElement(t.p,null,"On Kubernetes, the majority of MeshConfig and ProxyConfig configuration is concealed behind options in the Helm installation, although not all of it is exposed via Helm. To have complete control over the installation, you'll need to post-process the file output by Helm.")),r.createElement("h4",null,"Networking Configuration"),r.createElement("p",null,r.createElement(t.p,null,"Networking configuration is Istio’s bread and butter—the configuration to manage how traffic flows through the mesh.")),r.createElement("p",null,r.createElement(t.p,null,"Istio's networking APIs revolve around ServiceEntry. ServiceEntry defines a service by its names—the set of hostnames clients use to call the service. DestinationRules define how clients communicate with a service: what load balancing, outlier detection, circuit breaking, and connection pooling strategies to use, which TLS settings to use, etc. VirtualServices configure how traffic flows to a service: L7 and L4 routing, traffic shaping, retries, timeouts, etc. Gateways configure how services are exposed outside of the mesh: what hostnames are routed to which services, how to serve certs for those hostnames, etc. Service proxies configure how services are exposed inside of the mesh, which services are available to which clients.")),r.createElement("h4",null,"Service Discovery"),r.createElement("p",null,r.createElement(t.p,null,"Pilot integrates with different service discovery systems, such as the Kubernetes API server, Consul, and Eureka, to discover service and endpoint information about the local environment. Adapters in Pilot consume service discovery data from their source and synthesize ServiceEntry objects. For example, the integration with Kubernetes uses the Kubernetes SDK to watch the API server for service creation and service endpoint update events. The registry adapter in Pilot creates a ServiceEntry object based on this data. That ServiceEntry is used to update Pilot’s internal model and generate an updated configuration for the data plane.")),r.createElement("p",null,r.createElement(t.p,null,"Pilot registry adapters were previously implemented in Golang.  These adapters can now be detached from Pilot with the introduction of Galley. A service discovery adapter reads an existing service registry and produces a set of ServiceEntry objects as a separate job (or an offline process done by a continuous integration system). Those ServiceEntries can then be supplied to Galley as files and uploaded to the Kubernetes API server. Alternatively, you can create your own Mesh Config Protocol server and feed Galley the ServiceEntries. Static ServiceEntries can be useful to enable Istio in largely static environments (e.g., legacy VM-based deployments with rarely-changing IP addresses).")),r.createElement("p",null,r.createElement(t.p,null,"ServiceEntries bind a set of hostnames to endpoints to construct a Service. IP addresses or DNS names can be those endpoints. A network, locality, and weight can be assigned to each endpoint individually. ServiceEntries can define complex network topologies as a result of this. A service deployed across separate clusters (with different networks) that are geographically disparate (have different localities) can be created and have traffic split amongst its members by percentage (weights)—or in fact, by nearly any feature of the request.  Since Istio knows where distant networks' ingress points are, when a service endpoint in a remote network is selected, the service proxy will route traffic to the remote network's ingress. We can even write policies to prefer local endpoints over endpoints in other localities but automatically failover to other localities if local endpoints are unhealthy. ")),r.createElement("h3",null,"Config Serving"),r.createElement("p",null,r.createElement(t.p,null,"Pilot constructs a model of the environment and state of a deployment using these three config sources—mesh config, networking config, and service discovery. As service proxy instances are deployed into the cluster, they connect to Pilot asynchronously. Pilot groups the service proxies based on their labels and the service to which they are sidecarred. Pilot creates Discovery Service (xDS) responses for each group of connected service proxies using this paradigm. Pilot transmits the current state of the environment and the configuration that reflects the environment when a service proxy connects. The model is updated regularly due to the generally dynamic nature of the underlying platform(s). Updates to the model mean updating the current set of xDS configurations. When the Discovery Service config is changed, Pilot computes the groups of affected service proxies and pushes the updated configuration to them.")),r.createElement("p",null,"Service proxy (Envoy) configuration can be divided into two main groups: "),r.createElement("ul",null,r.createElement("li",null,"Listeners and Routes"),r.createElement("li",null,"Clusters and Endpoints")),r.createElement("p",null,r.createElement(t.p,null,'Listeners define a set of filters (for example, an HTTP filter delivers Envoy\'s HTTP functionality) and how Envoy connects those filters to a port. These are of two types: physical and virtual. A physical listener is one where Envoy binds to the specified port. A virtual listener accepts traffic from a physical listener without binding to a port (instead, some physical listener must direct traffic to it). Listeners and Routes work together to configure how a Listener routes traffic to a specified Cluster (e.g., by matching on HTTP path or SNI name). A cluster is a collection of endpoints that includes information on how to contact them (TLS settings, load balancing strategy, connection pool settings, etc.).  A Cluster is analogous to a "service." Finally, Endpoints are individual network hosts (IP addresses or DNS names) that Envoy will forward traffic to. ')),r.createElement("h3",null,"Troubleshooting Pilot"),r.createElement("p",null,r.createElement(t.p,null,"To examine the state of service proxies connected to Pilot, see these endpoints:")),r.createElement("ul",null,r.createElement("li",null,r.createElement("code",null,"/debug/edsz")," - prints all of Pilot’s set of pre-computed EDS responses; i.e. the endpoints it sends to each connected service proxy"),r.createElement("li",null,r.createElement("code",null,"/debug/adsz")," - prints the set of listeners, routes, and clusters pushed to each service proxy connected to Pilot"),r.createElement("li",null,r.createElement("code",null,"/debug/cdsz")," - prints the set of clusters pushed to each service proxy connected to Pilot"),r.createElement("li",null,r.createElement("code",null,"/debug/synz")," - print the status of ADS, CDS, and EDS connections of all service proxies connected to pilot. In particular this shows the last nonce Pilot is working with vs the last nonce Envoy has ACK’d, showing which Envoys are not accepting configuration updates")),r.createElement("p",null,r.createElement(t.p,null,"To examine Pilot’s understanding of the state of the world (its service registries), see these endpoints:")),r.createElement("ul",null,r.createElement("li",null,r.createElement("code",null,"/debug/registryz")," - print the set of services Pilot knows about across all registries"),r.createElement("li",null,r.createElement("code",null,"/debug/endpointz[?brief=1]")," - print the endpoints for every service Pilot knows about, including their ports, protocols, service accounts, labels, etc. If you provide the brief flag, the output will be a human-readable table (as opposed to a JSON blob for the normal version). This is a legacy endpoint and ",r.createElement("code",null,"/debug/endpointShardz")," provides strictly more information."),r.createElement("li",null,r.createElement("code",null,"/debug/endpointShardz")," - print the endpoints for every service Pilot knows about, grouped by the registry that provided the endpoint. For example, if the same service exists in both Consul and Kubernetes, endpoints for the service will be grouped into two shards, one each for Consul and Kubernetes. This endpoint provides everything from ",r.createElement("code",null,"/debug/endpoint")," and more, including data like the endpoint’s network, locality, load balancer weight, representation in Envoy xDS config, etc."),r.createElement("li",null,r.createElement("code",null,"/debug/workloadz")," - print the set of endpoints (“workloads”) connected to Pilot, and their metadata (like labels)"),r.createElement("li",null,r.createElement("code",null,"/debug/configz")," - print the entire set of Istio configuration Pilot knows about. Only validated config that Pilot is using to construct its model will be returned; useful for understanding situations where Pilot is not processing new config itself.")),r.createElement("p",null,r.createElement(t.p,null,"You can also find miscellaneous endpoints with higher level debug information, be wading through these endpoints:")),r.createElement("ul",null,r.createElement("li",null,r.createElement("code",null,"/debug/authenticationz[?proxyID=pod_name.namespace]")," - prints the Istio authentication policy status of the target proxy for each host and port it’s serving, including: the name of the authentication policy affecting it, the name of the DestinationRule affecting it, whether the port expects mTLS, standard TLS, or plain text, and if settings across configuration cause a conflict for this port."),r.createElement("li",null,r.createElement("code",null,"/debug/config_dump[?proxyID=pod_name.namespace]")," - prints the listeners, routes, and clusters for the given node; this can be diff’d directly against the output of ",r.createElement("code",null,"istioctl proxy-config")),r.createElement("li",null,r.createElement("code",null,"/debug/push_status")," - prints the status of each connected endpoint as of Pilot’s last push period; includes the status of each connected proxy, when the push period began (and ended), and the identities assigned to each port of each host.")),r.createElement("h3",null,"Tracing Configuration"),r.createElement("p",null,r.createElement(t.p,null,"In this section, we’ll use some tools to understand the before-and-after of Istio configuration and the resultant xDS configuration pushed to service proxies.")),r.createElement("h4",null,"Listeners"),r.createElement("p",null,"Gateways and VirtualServices results in Listeners for Envoy. Gateways result in physical listeners (listeners that bind to a port on the network), while VirtualServices result in virtual listeners (listeners that do not bind to a port, but instead receive traffic from physical listeners). Demonstration of how Istio configuration manifests into xDS configuration by creating a Gateway:"),r.createElement(t.pre,null,r.createElement(t.code,null,"apiVersion: networking.istio.io/v1alpha3\nkind: Gateway\nmetadata:\n  name: foo-com-gateway\nspec:\n  selector:\n    istio: ingressgateway\n  servers:\n  - hosts:\n    - “*.foo.com”\n    port:\n      number: 80\n      name: http\n      protocol: HTTP\n")),r.createElement("p",null,"Creation of this Istio Gateway results in a single HTTP listener on port 80 on our Ingress Gateway."),r.createElement(t.pre,null,r.createElement(t.code,null,'$ istioctl proxy-config listener istio-ingressgateway_PODNAME -o json -n istio-system\n[\n    {\n        "name": "0.0.0.0_80",\n        "address": {\n            "socketAddress": {\n                "address": "0.0.0.0",\n                "portValue": 80\n            }\n        },\n        "filterChains": [\n            {\n                "filters": [\n                    {\n                        "name": "envoy.http_connection_manager",\n...\n                            "rds": {\n                                "config_source": {\n                                    "ads": {}\n                                },\n                                "route_config_name": "http.80"\n                            },\n...\n')),r.createElement("p",null,"It's worth noting that the newly created filter is listening on address 0.0.0.0. This is the listener for all HTTP traffic on port 80, regardless of the host to which it is addressed. If we enable TLS termination for this Gateway, we'll see a new listener created just for the hosts we’re terminating TLS for, while the rest would fall into this catch-all listener."),r.createElement("p",null,"Let’s bind a VirtualService to this Gateway"),r.createElement(t.pre,null,r.createElement(t.code,null,"apiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n name: foo-default\nspec:\n hosts:\n - bar.foo.com\n gateways:\n - foo-com-gateway\n http:\n - route:\n   - destination:\n       host: bar.foo.svc.cluster.local\n")),r.createElement("p",null,"See how it manifests as virtual listener."),r.createElement(t.pre,null,r.createElement(t.code,null,'$ istioctl proxy-config listener istio-ingressgateway_PODNAME -o json\n\n\n[\n    {\n        "name": "0.0.0.0_80",\n        "address": {\n            "socketAddress": {\n                "address": "0.0.0.0",\n                "portValue": 80\n            }\n        },\n        "filterChains": [\n            {\n                "filters": [\n                    {\n                        "name": "envoy.http_connection_manager",\n...\n                            "rds": {\n                                "config_source": {\n                                    "ads": {}\n                                },\n                                "route_config_name": "http.80"\n                            },\n...\n')),r.createElement("p",null,r.createElement(t.p,null,"We encourage that you try different protocols for the ports (or list a single Gateway with many ports with various protocols) to see how this results in different filters. Configuring different TLS settings within the Gateway also changes the generated Listener configuration. For each protocol you use, you'll notice a protocol-specific filter configured in the Listener (for HTTP, this is the http connection manager and its router, for MongoDB another, for TCP another, and so on). To explore how different combinations of hosts in the Gateway and VirtualService interact, we also recommend exploring different combinations of hosts in the Gateway and VirtualService.")),r.createElement("h4",null,"Routes"),r.createElement("p",null,"We've seen how VirtualServices cause Listeners to be created. In Envoy, the majority of the configuration you specify in VirtualServices manifests as Routes. Routes exist in a variety of flavors, with a set of routes for each protocol supported by Envoy."),r.createElement(t.pre,null,r.createElement(t.code,null,'$ istioctl proxy-config route istio-ingressgateway_PODNAME -o json\n\n$ istioctl proxy-config route istio-ingressgateway_PODNAME -o json\n[\n    {\n        "name": "0.0.0.0_80",\n        "virtualHosts": [\n            {\n                "name": "bar.foo.com:80",\n                "domains": [\n                    "bar.foo.com",\n                    "bar.foo.com:80"\n                ],\n                "routes": [\n                    {\n                        "match": {\n                            "prefix": "/"\n                        },\n                        "route": {\n                            "cluster": "outbound|8000||bar.foo.svc.cluster.local",\n                            "timeout": "0s",\n                            "retryPolicy": {\n                                "retryOn": "connect-failure,refused-stream,unavailable,cancelled,resource-exhausted,retriable-status-codes",\n                                "numRetries": 2,\n                                "retryHostPredicate": [\n                                    {\n                                        "name": "envoy.retry_host_predicates.previous_hosts"\n                                    }\n                                ],\n                                "hostSelectionRetryMaxAttempts": "3",\n                                "retriableStatusCodes": [\n                                    503\n                                ]\n                            },\n...\n\n\nExample 7.5 -  Envoy Route (RDS) configuration for the VirtualService in Example 7.3. Notice the default Retry Policy and the embedded Mixer configuration (which is used for reporting telemetry back to Mixer).\n\nWe can update our Route to include some match conditions to see how this results in different Routes for Envoy (Example 7-6):\n\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n name: foo-default\nspec:\n  hosts:\n  - bar.foo.com\n  gateways:\n  - foo-com-gateway\n  http:\n  - match:\n    - uri:\n        prefix: /whiz\n    route:\n    - destination:\n        host: whiz.foo.svc.cluster.local\n  - route:\n    - destination:\n        host: bar.foo.svc.cluster.local\n\n')),r.createElement("p",null,"We can update our Route to include some match conditions to see how this results in different Routes for Envoy"),r.createElement(t.pre,null,r.createElement(t.code,null,"apiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n name: foo-default\nspec:\n  hosts:\n  - bar.foo.com\n  gateways:\n  - foo-com-gateway\n  http:\n  - match:\n    - uri:\n        prefix: /whiz\n    route:\n    - destination:\n        host: whiz.foo.svc.cluster.local\n  - route:\n    - destination:\n        host: bar.foo.svc.cluster.local\n\n")),r.createElement("p",null,"Similarly we can add retries, split traffic amongst several destinations, inject faults, and more. All of these options in VirtualServices manifest as Routes in Envoy."),r.createElement(t.pre,null,r.createElement(t.code,null,'$ istioctl proxy-config route istio-ingressgateway_PODNAME -o json\n\n\n[\n    {\n        "name": "http.80",\n        "virtualHosts": [\n            {\n                "name": "bar.foo.com:80",\n                "domains": [\n                    "bar.foo.com",\n                    "bar.foo.com:80"\n                ],\n                "routes": [\n                    {\n                        "match": {\n                            "prefix": "/whiz"\n                        },\n                        "route": {\n                            "cluster": "outbound|80||whiz.foo.svc.cluster.local",\n...\n                    {\n                        "match": {\n                            "prefix": "/"\n                        },\n                        "route": {\n                            "cluster": "outbound|80||bar.foo.svc.cluster.local",\n...\n')),r.createElement("h4",null,"Clusters"),r.createElement("p",null,"We can see that Istio creates a cluster for each service and port in the mesh if we use ",r.createElement("code",null,"istioctl")," to look at clusters. To see a new Cluster emerge in Envoy, we can construct a new ServiceEntry:"),r.createElement(t.pre,null,r.createElement(t.code,null,"apiVersion: networking.istio.io/v1alpha3\nkind: ServiceEntry\nmetadata:\n  name: http-server\nspec:\n  hosts:\n  - some.domain.com\n  ports:\n  - number: 80\n    name: http\n    protocol: http\n  resolution: STATIC\n  endpoints:\n  - address: 2.2.2.2\n")),r.createElement(t.pre,null,r.createElement(t.code,null,'$ istioctl proxy-config cluster istio-ingressgateway_PODNAME -o json\n\n\n[\n...\n    {\n        "name": "outbound|80||some.domain.com",\n        "type": "EDS",\n        "edsClusterConfig": {\n            "edsConfig": {\n                "ads": {}\n            },\n            "serviceName": "outbound|80||some.domain.com"\n        },\n        "connectTimeout": "10s",\n        "circuitBreakers": {\n            "thresholds": [\n                {\n                    "maxRetries": 1024\n                }\n            ]\n        }\n    },\n...\n\n')),r.createElement("p",null,"We can experiment with adding new ports (with different protocols) to the ServiceEntry to see how this affects the generation of new Clusters. A DestinationRule is another tool that may be used to generate and update Clusters in Istio. We establish new Clusters by creating Subsets, and we impact the configuration inside the Cluster by modifying load balancing and TLS settings."),r.createElement(t.pre,null,r.createElement(t.code,null,"apiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: some-domain-com\nspec:\n  host: some.domain.com\n  subsets:\n  - name: v1\n    labels:\n      version: v1\n  - name: v2\n    labels:\n      version: v2\n")),r.createElement(t.pre,null,r.createElement(t.code,null,'$ istioctl proxy-config cluster istio-ingressgateway_PODNAME -o json\n\n\n[\n...\n    {\n        "name": "outbound|80||some.domain.com",\n...\n    },\n    {\n        "name": "outbound|80|v1|some.domain.com",\n...\n        "metadata": {\n            "filterMetadata": {\n                "istio": {\n                    "config": "/apis/networking/v1alpha3/namespaces/default/destination-rule/some-domain-com"\n                }\n            }\n        }\n    },\n    {\n        "name": "outbound|80|v2|some.domain.com",\n...\n    },\n...\n\n')),r.createElement("p",null,"Notice that we still have our original cluster, outbound|80||some.domain.com, but that we got a new cluster for each Subset we defined as well. Istio annotates the Envoy configuration with the rule that resulted in it being created to help debug."))}var s=function(e){void 0===e&&(e={});var t=Object.assign({},(0,o.ah)(),e.components).wrapper;return t?r.createElement(t,e,r.createElement(i,e)):i(e)};var a=n(17875),l=n(72417),c=function(e){var t=e.data,n=e.children;return r.createElement(r.Fragment,null,r.createElement(l.Z,{data:t},n))};function u(e){return r.createElement(c,e,r.createElement(s,e))}var d=function(e){var t=e.data;return r.createElement(a.Z,{title:t.mdx.frontmatter.title,image:t.mdx.frontmatter.thumbnail.publicURL})}},72417:function(e,t,n){"use strict";n.d(t,{Z:function(){return w}});var o=n(67294),r=n(71082),i=n(40156),s=n(6652),a=n(33754),l=n(85313).default.div.withConfig({displayName:"resourceSinglestyle__ResourcePageWrapper",componentId:"sc-gfz8rr-0"})(["\n    color: ",";\n    .single-resource-wrapper{\n        margin-bottom: 4rem;\n\n        h3 {\n            text-align: center;\n        }\n    }\n\n    .resource-info-block{\n        margin-top: 3rem;\n        border-bottom: 1px solid ",";\n        padding-bottom: 2rem;\n    }\n    p {\n        color: ",";\n    }\n    li {\n        color: ",";\n    }\n    .backBtn {\n        margin: 3rem auto;\n        font-weight: 600;\n        z-index: 2;\n\n        @media screen and (max-width: 62rem) {\n            display: none;\n        }\n        a{\n            display: flex;\n            color: ",";\n            &:hover{\n                color: ",";\n            }\n\n            h4 {\n                line-height: 1.75rem;\n                margin-left: 0.5rem;\n            }\n            svg {\n                font-size: 1.75rem;\n            }\n        }\n    }\n\n    .tags{\n        display: flex;\n        span{\n            font-size: 1.2rem;\n            align-self: center;\n        }\n        a{\n            color: ",";\n            margin: 0.2rem;\n            display: inline-block;\n            padding: 0.3rem 0.8rem;\n            border-radius: 0.2rem;\n            background: #F0F0F0;\n            transition: all 0.3s linear;\n            &:hover{\n                background: ",";\n                color: ",";\n            }\n        }\n        div{\n            display: inline-flex;\n            flex-wrap: wrap;\n        }\n    }\n    @media screen and (max-width: 360px){\n        .tags{\n            span{\n                position: relative;\n                top: 0.5rem;\n                align-self: flex-start;\n            }\n        }\n    }\n"],(function(e){return e.theme.text}),(function(e){return e.theme.text}),(function(e){return e.theme.text}),(function(e){return e.theme.text}),(function(e){return e.theme.primaryColor}),(function(e){return e.theme.linkColor}),(function(e){return e.theme.black}),(function(e){return e.theme.secondaryColor}),(function(e){return e.theme.white})),c=n(75472),u=n.n(c),d=n(64721),h=n.n(d);function m(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(n)return(n=n.call(e)).next.bind(n);if(Array.isArray(e)||(n=function(e,t){if(!e)return;if("string"==typeof e)return f(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return f(e,t)}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var o=0;return function(){return o>=e.length?{done:!0}:{done:!1,value:e[o++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function f(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}var p=function(){function e(e,t){this.resources=e.filter((function(e){return e.fields.slug!==t})),this.currentResourceSlug=t,this.maxResources=6,this.category=null,this.tags=[]}var t=e.prototype;return t.setMaxResources=function(e){return this.maxResources=e,this},t.setCategory=function(e){return this.category=e,this},t.setTags=function(e){return this.tags=e,this},t.getResources=function(){var e=this.category,t=this.tags,n=this.resources,o=this.maxResources,r={};if(!1==!!t||0===t.length)return console.error("RelatedResourcesFactory: Tags not provided, use setTags()."),[];if(!1==!!e)return console.error("RelatedResourcesFactory: Category not provided, use setCategory()."),[];for(var i,s=function(e){return e.fields.slug},a=function(e){var t=s(e);Object.prototype.hasOwnProperty.call(r,t)||(r[t]={resource:e,points:0})},l=function(e,t){var n=s(e);e.frontmatter.category===t&&(r[n].points+=2)},c=function(e,t){var n=s(e);e.frontmatter.tags.forEach((function(e){h()(t,e)&&(r[n].points+=1)}))},d=m(n);!(i=d()).done;){var f=i.value;a(f),l(f,e),c(f,t)}var p=Object.keys(r).map((function(e){return r[e]}));return u()(p,["points"],["desc"]).splice(0,o)},e}(),g=n(78705),y=(0,i.ZP)((function(){return n.e(35575).then(n.bind(n,59434))})),v=(0,i.ZP)((function(){return Promise.all([n.e(40532),n.e(67326),n.e(18514)]).then(n.bind(n,24210))})),w=function(e){var t=e.data,n=e.children,i=t.mdx,c=i.frontmatter,u=i.fields,d=(0,r.useStaticQuery)("2848499768").allMdx.nodes,h=new p(d,u.slug).setMaxResources(6).setCategory(c.category).setTags(c.tags).getResources();return o.createElement(l,null,o.createElement(a.Z,{title:c.title,subtitle:c.subtitle,thumbnail:c.thumbnail}),o.createElement("div",{className:"single-resource-wrapper"},o.createElement(s.W2,null,n,o.createElement(y,{category:"MeshMap"}),o.createElement("div",{className:"backBtn"},o.createElement(r.Link,{to:"/resources"},o.createElement(g.O,null),o.createElement("h4",null,"All Resources"))),o.createElement(v,{resourceType:"resources",relatedResources:h,mainHead:"Related Resources",lastCardHead:"All Resources",linkToAllItems:"/resources"}))))}}}]);