(self.webpackChunkLayer5=self.webpackChunkLayer5||[]).push([[78175],{78705:function(e,t,n){var r=n(15301).w_;e.exports.O=function(e){return r({tag:"svg",attr:{viewBox:"0 0 512 512"},child:[{tag:"path",attr:{d:"M256 48C141.1 48 48 141.1 48 256s93.1 208 208 208 208-93.1 208-208S370.9 48 256 48zm43.4 289.1c7.5 7.5 7.5 19.8 0 27.3-3.8 3.8-8.7 5.6-13.6 5.6s-9.9-1.9-13.7-5.7l-94-94.3c-6.9-7.6-6.7-19.3.6-26.6l95.4-95.7c7.5-7.5 19.7-7.6 27.3 0 7.5 7.5 7.6 19.7 0 27.3l-81.9 81 79.9 81.1z"}}]})(e)}},69282:function(e,t,n){"use strict";n.r(t),n.d(t,{Head:function(){return b},default:function(){return v}});var r=n(39626),a=n(67294),i=n.p+"static/figure1-af740ed1ba314b3196bae4081ed294d3.webp",o=n.p+"static/citrix-architectures-for-kubernetes-environments.d79c3721.svg",s=n.p+"static/citrix-two-tier-ingress.5c271192.svg",l=n.p+"static/citrix-unified-ingress.e24b73fc.svg",c=n.p+"static/citrix-service-mesh.94247735.svg",u=n.p+"static/citrix-service-mesh-lite.50ff6a29.svg",d=n.p+"static/citrix-oss-integration-categories.a43533cd.svg";function m(e){var t=Object.assign({p:"p",em:"em"},(0,r.ah)(),e.components),n=t.ResourcesWrapper,m=t.Link;return m||p("Link",!0),n||p("ResourcesWrapper",!0),a.createElement(n,null,a.createElement("h2",null,"The Role of Application Delivery in Your Cloud Native Journey"),a.createElement("p",null,a.createElement(t.p,null,"As digital transformation is changing how your organization conducts business, so is it changing how your products and services are delivered. The infrastructure and practices by which your software is continuously deployed and operated — your application delivery — is the fulcrum of your organization’s digital transformation. Likely you are progressing on your cloud native journey — that is, transitioning from monolithic to container-based microservices architectures with the goal of achieving agility, portability, and on-demand scalability. Kubernetes is the platform of choice for many, providing the automation and control necessary to manage microservices-based applications at scale and with high velocity.")),a.createElement("p",null,a.createElement(t.p,null,"With the network part and parcel to each and every service request in your microservices-based application, it may come as no surprise that at the core of application delivery is your application delivery controller, an intelligent proxy that accelerates and manages application delivery. With no standard definition of what an application delivery controller does, the capabilities of intelligent proxies vary broadly. And so in this white paper, we’ll explore application delivery controllers as they relate to your architecture choices, your use of Kubernetes platforms, and open source tools.")),a.createElement("h2",null,"7 Key Considerations for Microservices-Based Application Delivery"),a.createElement("p",null,a.createElement(t.p,null,"Before embarking on your cloud native journey, it is essential to critically assess your organization’s readiness with regard to skill set so that you can choose the solutions that best fit the business objective you are seeking to meet in context of your ability to do so. There are seven key considerations to address when planning your microservices-based application delivery design:")),a.createElement("ol",null,a.createElement("li",null,"Architecting your foundation the right way "),a.createElement("li",null,"Openly integrating with the cloud native ecosystem"),a.createElement("li",null,"Choosing the perfect proxy"),a.createElement("li",null,"Securing your applications and APIs"),a.createElement("li",null,"Enabling CI/CD and canary deployment with advanced traffic steering "),a.createElement("li",null,"Achieving holistic observability"),a.createElement("li",null,"Managing monoliths and microservices")),a.createElement("p",null,a.createElement(t.p,null,"A thorough evaluation of these seven considerations is best done with specific tasks and goals in mind. Depending on the size and diversity of your organization, you may need to account for a variety of stakeholders’ needs — that is, tasks and goals that differ based on role and responsibility. In context of application delivery, let’s survey the most common roles with a generalized view of their responsibilities and needs as stakeholders. To help facilitate a general understanding, we’ve grouped some roles when responsibilities overlap across multiple teams:")),a.createElement("ul",null,a.createElement("li",null,a.createElement("h3",null,"Platform"),a.createElement("p",null,a.createElement(t.p,null,"Platform teams are responsible for deploying and managing their Kubernetes infrastructure. They are responsible for platform governance, operational efficiency, and developer agility. The platform team is the connective tissue among various teams like DevOps, SREs, developers, and network operations teams and therefore must address and balance the unique needs of a diverse group of stakeholders, or influencers, when choosing cloud native solutions."))),a.createElement("li",null,a.createElement("h3",null,"DevOps"),a.createElement("p",null,a.createElement(t.p,null,"DevOps teams are responsible for continuously deploying applications. They care about faster development and release cycles, CI/CD and automation, and canary and progressive rollout."))),a.createElement("li",null,a.createElement("h3",null,"SREs"),a.createElement("p",null,a.createElement(t.p,null,"Site reliability engineers must ensure application availability. They care about observability, incident response, and postmortems. SREs often act as architects for DevOps team and as such are often extensions of or directly belong to DevOps teams."))),a.createElement("li",null,a.createElement("h3",null,"Developers"),a.createElement("p",null,a.createElement(t.p,null,"Development teams are responsible for application performance and are focused on ensuring a seamless end-user experience, including troubleshooting and microservices discovery and routing. Application performance and troubleshooting is shared responsibility among multiple teams."))),a.createElement("li",null,a.createElement("h3",null,"NetOps "),a.createElement("p",null,a.createElement(t.p,null,"Network operations teams are responsible for ensuring stable, high-performing network connectivity, resiliency, security (e.g. web application firewalls and TLS), and are commonly focused on north-south traffic. They care about establishing networking policies and enforcing compliance; achieving management, control, and monitoring of the network; and gaining visibility for the purpose of resources and capacity planning."))),a.createElement("li",null,a.createElement("h3",null,"DevSecOps"),a.createElement("p",null,a.createElement(t.p,null,"DevSecOps teams care about ensuring a strong security posture and rely on automated tools to orchestrate security for infrastructure, applications, containers, and API gateways. DevSecOps works very closley with NetOps team for holistic secure posture.")))),a.createElement("div",{className:"center"},a.createElement("img",{src:i,align:"center",alt:"Diverse Stakeholders have different needs"})),a.createElement("p",null,a.createElement(t.p,null,"Each role has nuanced responsibilities. Whether you have a single person or teams of people assigned to these roles, each role’s function needs to be accounted for.")),a.createElement("p",null,a.createElement(t.p,null,"It’s important to note that these stakeholders are undergoing a transformation in their responsibilities — or at least a transformation in the way in which they perform their responsibilities. Depending upon your organization’s size and structure, your stakeholders may have clearly defined lines of accountability or not among roles. As you adopt a cloud native approach to application deployment and delivery, you may find that the once-defined lines have blurred or that they are being redrawn. Be aware that the individuals who fill these roles typically go through a period of adjustment that can be unsettling until they adapt to their own and their teams’ new identities.")),a.createElement("p",null,a.createElement(t.p,null,"Your cloud native infrastructure should be as accommodating as possible to you, your team, and your collective responsibilities and process, so we encourage you to seek solutions that address the needs of all your stakeholders. Significantly, this includes evaluating different architectural models for as best fit for purpose. While every organization doesn’t travel the same road to cloud native, every journey starts with initial architectural decisions – decisions which have substantial bearing on your path to cloud native.")),a.createElement("h2",null,"Architecting Your Foundation the Right Way"),a.createElement("p",null,a.createElement(t.p,null,"Cloud native novices and experts alike find that designing their application delivery architectures is the most challenging part of building microservices. Your architectural choices will have a significant impact on your cloud native journey. Some architectures will provide greater or fewer benefits while others will prove less or more difficult to implement.")),a.createElement("p",null,a.createElement(t.p,null,"Whether you are a cloud native pro or a novice, your selection of the right application delivery architecture will be one that balances the tradeoff between the greatest benefits and the simplicity needed to match your team’s skill set. Figure 1 highlights four common application delivery architecture deployment models:")),a.createElement("div",{className:"center"},a.createElement("img",{src:o,align:"center",alt:"Graph"})),a.createElement("div",{className:"intro"},a.createElement("h3",{style:{textAlign:"center"}},"Tip: Traffic Directions"),a.createElement("p",null,a.createElement(t.p,null,"North-south (N-S) traffic refers to traffic between clients outside the Kubernetes cluster and services inside the cluster, while east-west (E-W) traffic refers to traffic between services inside the Kubernetes cluster."))),a.createElement("p",null,a.createElement(t.p,null,"Each of the deployment models in Figure 1 come with their list of pros and cons and are typically the point of focus of different teams. So how do you choose the right architecture for your deployment? Given the needs of your stakeholders and the many specifics involved in managing both north-south (N-S) and east-west (E-W) traffic, it is critical to assess the four different architectures with respect to the following areas:")),a.createElement("ul",null,a.createElement("li",null,"Application security "),a.createElement("li",null,"Observability "),a.createElement("li",null,"Continuous deployment "),a.createElement("li",null,"Scalability and performance "),a.createElement("li",null,"Open source tools integration "),a.createElement("li",null,"Service mesh & Istio  integration "),a.createElement("li",null,"IT skill set required ")),a.createElement(t.p,null,"Let’s examine each of the four deployment models."),a.createElement("h3",null,"Two-Tier Ingress"),a.createElement("div",{className:"right"},a.createElement("img",{src:s,align:"centre",alt:"Two Tier Ingress"})),a.createElement("p",null,a.createElement(t.p,null,"Two-tier ingress is the simplest architectural model to deploy to get teams up and running quickly. In this deployment model, Tthere are two layers of ADCs for N-S traffic ingress. The external ADC (at Tier 1), shown in green in Figure 2, provides L4 traffic management. Frequently, additional services are assigned to this ADC and can include web application firewall (WAF) and, secure sockets layer/transport layer security offload (SSL/TLS) functionality and authentication. A two-tier ingress deployment model is often managed by the existing network team (which is familiar with internet-facing traffic), and it can also be used as an ADC for other existing applications simultaneously.")),a.createElement("p",null,a.createElement(t.p,null,"The second ADC (Tier 2), shown in yellow in Figure 2, handles L7 load balancing for N-S traffic. It is managed by the platform team and is used within the Kubernetes cluster to direct traffic to the correct node. Layer 7 attributes, like information in the URL and HTTP headers, can be used for traffic load-balancing decisions. The yellow ADC continuously receives updates about the availability and respective IP addresses of the microservices pods within the Kubernetes cluster and can make decisions about which pod is best able to handle the request. Deployed as a container inside the Kubernetes cluster, the yellow ADC can be deployed as a container with Citrix CPX or with another similar product.")),a.createElement("p",null,a.createElement(t.p,null,"The E-W traffic between microservices pods is managed by kube-proxy, an open source, basic L4 load balancer with simple IP address-based round robin or least connection algorithm. kube-proxy lacks advanced features like Layer 7 load balancing, security, and observability, making it a blind spot for E-W traffic.")),a.createElement("b",null,"Pros of Two-Tier Ingress"),a.createElement("p",null,a.createElement(t.p,null,"With the right proxy, SSL termination can be done at the edge, and traffic can be inspected easily. This enables N-S traffic to be comprehensively secured across L3-7. ADC collects and reports telemetry on the N-S application traffic it sees, which means that this architecture provides robust observability for N-S traffic. ADC can also also integrate with CI/CD tools like Spinnaker to provide traffic management to N-S traffic for excellent continuous deployment capabilities.")),a.createElement("p",null,a.createElement(t.p,null,"Two-tier ingress scales very well for N-S traffic, as an example Citrix ADC reach hundreds of Gbps or even Tbps throughput through active-active clustering of ADCs if required. Integration with third-party tools like Prometheus, Grafana and Zipkin are supported out of the box with ADC, so you can continue to use the tools with which you are familiar to collect data and manage your systems for N-S traffic.")),a.createElement("p",null,a.createElement(t.p,null,"The bifurcated design of two-tier ingress makes it relatively simple to implement demarcation points for control. The network team can own and manage the green ADC, and the platform team can work inside the Kubernetes environment. Neither the network team nor the platform team needs extensive retraining, which makes this architecture quick to implement.")),a.createElement("b",null,"Cons of Two-Tier Ingress"),a.createElement("p",null,a.createElement(t.p,null,"The limitations of kube-proxy have made the use of third-party tools like Project Calico necessary to provide network policies, segmentation, and security support for inter-microservices communication. Similarly, kube-proxy's lack of detailed telemetry capabilities provides very little observability for E-W traffic. kube-proxy does not have the extensive APIs to integrate with continuous deployment tools, and its basic round-robin load balancing does not provide the granular load balancing needed to incorporate a CI/CD strategy inside the cluster. In general so you lack advanced load balancing tool set required to manage your inter-pod traffic. And kube-proxy does not currently integrate with service meshes, so there is no open source control plane integration for your E-W traffic management.")),a.createElement("p",null,a.createElement(t.p,null,"Overall, two-tier ingress provides excellent services for N-S traffic but lacks control for E-W traffic. It is a popular architecture because it is simple to implement and is frequently a starting point for enterprises on their cloud native journey to microservices adoption.")),a.createElement("div",{className:"note"},a.createElement(t.p,null,"By default, kube-proxy uses iptables (x_tables kernel modules), so it does not perform as well as other proxies. You can configure kube-proxy to run in different modes by setting the --proxy-mode flag. Setting this flag to ipvs enables IPVS mode (netfilter kernel modules), which provides a much improved performance and also enables choice of load balancing algorithm through the --ipvs-scheduler parameter beyond the default round robin algorithm.")),a.createElement("h3",null,"Unified Ingress"),a.createElement("div",{className:"right"},a.createElement("img",{src:l,align:"centre",height:"50%",alt:"Unified Ingress"})),a.createElement("p",null,a.createElement(t.p,null,"Unified ingress is very similar to the two-tier ingress architecture, except that it unifies two tiers of application delivery controllers (ADCs) for N-S traffic into one. Reducing an ADC tier effectively removes one hop of latency for N-S traffic.")),a.createElement("p",null,a.createElement(t.p,null,"Unified ingress has the same benefits and drawbacks as the two-tier ingress proxy architecture for security, observability, continuous deployment, scale and performance, open source tools support, and service mesh integration. Where it differs is in the skill sets required for implementation. With unified ingress, both the ADCs for N-S traffic and kube-proxy for the E-W traffic are managed by the platform team, who must be very network savvy to implement and manage this architecture.")),a.createElement("p",null,a.createElement(t.p,null,"A unified ingress proxy architecture is capable of participating in the Kubernetes cluster’s overlay network. This allows it to communicate directly with the microservices pods. Therefore, the platform team has to be knowledgeable about layers 3-7 of the network stack to take full advantage of this architecture.")),a.createElement("p",null,a.createElement(t.p,null,"In summary, unified ingress proxy architecture is moderately simple to deploy compared to service mesh (which we will cover next), and it offers robust capabilities for N-S traffic, but has very limited functionality for E-W traffic due to the limitations of kube-proxy. A network-savvy platform team is key for implementing this architecture.")),a.createElement("h3",null,"Service Mesh"),a.createElement("p",null,a.createElement(t.p,null,"A service mesh is a dedicated infrastructure layer to control how different parts of an application communicate with one another with one another. The service mesh landscape has exploded because service meshes offer the best observability, security, and fine-grained management for traffic among microservices — that is, for E-W traffic. As an additional layer of infrastructure, service meshes do bear additional complexity as a tradeoff to the value they provide.")),a.createElement("div",{className:"left"},a.createElement("img",{src:c,align:"centre",alt:"Service Mesh"})),a.createElement("p",null,a.createElement(t.p,null,"A typical service mesh architecture is similar to the two-tier ingress proxy architecture for N-S traffic and offers the same rich benefits for N-S traffic. The key difference between service mesh and two-tier ingress, and where most of the value lies, is that service mesh employs a lightweight proxy as a sidecar to each microservice pod for E-W traffic. Microservices do not communicate directly: Communication among microservices happens via the sidecar, which enables inter-pod traffic to be inspected and managed as it enters and leaves the pods.")),a.createElement("p",null,a.createElement(t.p,null,"By using proxy sidecars, service mesh offers the highest levels of observability, security, and fine-grained traffic management and control among microservices. Additionally, select repetitive microservice functions like retries and encryption can be offloaded to the sidecars. Despite each sidecar’s being assigned its own memory and CPU resources, sidecars are typically lightweight.")),a.createElement("p",null,a.createElement(t.p,null,"You have the option to use Citrix CPX as a sidecar. Sidecars, which are managed by the platform team and attached to each pod, create a highly scalable, distributed architecture, but they also add complexity because they result in more moving parts.")),a.createElement("strong",null,"Pros of Service Mesh"),a.createElement("p",null,a.createElement(t.p,null,"The advantages of service mesh for N-S traffic are similar to those for two-tier ingress. Service mesh, however, brings added advantages for E-W traffic.The presence of sidecars enables you to set security policies and control communication among your microservices. You can mandate things like authentication, encryption, and rate limiting for APIs among microservices if required.")),a.createElement("p",null,a.createElement(t.p,null,"Because E-W traffic is seen by the sidecars, there is much more telemetry to provide holistic observability for better insights and improved troubleshooting. Furthermore, Citrix CPX as a sidecar has well-defined APIs that integrate with myriad open source tools, so that you can use the observability tools you're used to. Sidecar APIs allow integration with CI/CD tools like Spinnaker.")),a.createElement("p",null,a.createElement(t.p,null,"Similarly, sidecars will integrate with a service mesh control plane like Istio for E-W traffic. Additionally, repetitive functions like retries and encryption can be offloaded to the sidecars. The distributed nature of the sidecar means that the solution is scalable for such features as observability and security.")),a.createElement("strong",null,"Cons of Service Mesh"),a.createElement("p",null,a.createElement(t.p,null,"The biggest drawback of a service mesh architecture is the complexity of implementation (managing hundreds or thousands of sidecars is not trivial). The learning curve can be steep for the platform team because there are so many moving parts. A sidecar for every pod adds to CPU and memory needs. Similarly, sidecars add latency. Latency, which may affect application performance, varies with proxy implementation and can be easily measured by the open source tool, Meshery. Citrix CPX as a sidecar offers latency as low as 1ms, whereas other solutions can add much more.")),a.createElement("p",null,a.createElement(t.p,null,"Overall, a service mesh architecture provides excellent security, observability, and fine-grained traffic management for all traffic flows. The major downside is that it is complex to implement and manage.")),a.createElement("h3",null,"Service Mesh Lite"),a.createElement("div",{className:"right"},a.createElement("img",{src:u,align:"centre",alt:"Service Mesh Lite"})),a.createElement("p",null,a.createElement(t.p,null,"What if you want service mesh-like benefits with much less complexity?  The answer is service mesh lite, which is a variant of service mesh.")),a.createElement("p",null,a.createElement(t.p,null,"With a service mesh lite architecture, the ADC shown in green in Figure 5 is responsible for Layer 4-7 load balancing for N-S traffic to handle inbound requests and load balance to the right Kubernetes cluster. The green ADC may carry out SSL termination, web application firewalling, authentication, or other network services. It is managed by the networking team.")),a.createElement("p",null,a.createElement(t.p,null,"Depending on isolation and scale requirements, service mesh lite proxy architecture uses a single or several ADCs (shown in yellow in Figure 5) that proxy communications among microservices pods to manage inter-pod (E-W) traffic rather than using individual sidecars attached to each pod. Proxies can be deployed per node or per namespace and are managed by platform teams.")),a.createElement("strong",null,"Pros of Service Mesh Lite"),a.createElement("p",null,a.createElement(t.p,null,"Service mesh lite provides many of the same benefits as service mesh but reduces the overall complexity by only having a small set of proxy instances per cluster to manage the inter-pod traffic. Passing all E-W traffic through a small set of proxies provides the same advanced policy control, security, and fine-grained traffic management of a service mesh proxy architecture without all the complexity.")),a.createElement("p",null,a.createElement(t.p,null,"Another advantage of service mesh lite is reduced latency as compared to service mesh because end user request goes through fewer  proxies. The main advantage is reduced complexity and the lower skill set required to implement compared to service mesh. Similar to two-tier ingress, the networking team can manage the green ADC, and the platform team can manage the yellow ADC. With service mesh lite, both teams can work in familiar environments and develop at their own speed.")),a.createElement("strong",null,"Cons of Service Mesh Lite"),a.createElement("p",null,a.createElement(t.p,null,"Service mesh lite removes the implementation and management associated with service mesh, but the absence of a proxy per pod means that you sacrifice some functionality offload. For example, encryption for E-W must be implemented in each microservice, itself, if required.")),a.createElement("p",null,a.createElement(t.p,null,"Overall, service mesh lite provides most of the service mesh features but with reduced complexity and a lower IT skill set requirement. Many organizations who started with the two-tier ingress architecture find it an easy transition to service mesh lite for the added benefits it brings to their E-W traffic including better observability, enhanced security, better integration with open source tools, and support for continuous deployment.")),a.createElement("p",null,a.createElement(t.p,null,"So after reviewing the four architecture choices, you’re probably wondering: What ‘s the right architecture choice for my organization? There are no right or wrong answers. Like other architectural choices, proxy deployment models should be selected based on, in part, your application needs and your team structure and your team’s skill set.")),a.createElement("p",null,a.createElement(t.p,null,"Your model of proxy deployment is an important consideration, but just one of many when planning for your application delivery infrastructure. Ensuring that the application delivery components in your deployment are well-integrated into the cloud native ecosystem is your next consideration.")),a.createElement("h2",null,"Openly Integrating with the Cloud Native Ecosystem "),a.createElement("p",null,a.createElement(t.p,null,"It’s imperative that your various application delivery tools and processes, including your proxy, be well-integrated into commonplace cloud native infrastructure. It’s no secret that much of today’s innovation happens in open source software. And clouds, both public and private, are built upon open source software. So in most cases, your infrastructure will be comprised of popular open source infrastructure and tools that you have picked up on your journey to cloud native. To the extent this is the case, you’ll find common integrations by categories in Figure below:")),a.createElement("div",{className:"center"},a.createElement("img",{src:d,align:"center",alt:""}),a.createElement("p",null,"Figure - Key categories of consideration for proxy integration with Kubernetes platforms and open source tools")),a.createElement("p",null,a.createElement(t.p,null,"Cloud native environments make liberal use of open source software projects. Irrespective of which projects you use, suffice it to say that cloud native application delivery can’t be done with just containers. The combination of containers, container orchestration, and a service mesh will get you very far. And alongside a CI/CD system, these components are the most significant and ubiquitously used components of cloud native infrastructure. Integration with each of these categories of cloud native infrastructure is critical so that developers and operators can design and run systems that communicate and inter-operate as a whole. The fact that these bedrocks of cloud native infrastructure are open source unlocks their ability to be integrated.")),a.createElement("p",null,a.createElement(t.p,null,"At the heart of the cloud native ecosystem is the extensible and scalable orchestration infrastructure that is Kubernetes. The cloud native ecosystem (both open source and closed source) extends Kubernetes by writing custom resource definitions (CRDs) and associated controllers. The controllers and CRDs give operators a Kubernetes-native way to manage all parts of their platforms — both open source and closed source. This integration affords tool unification and powerful composable intent-based primitives that truly enable a software-defined platform.")),a.createElement("p",null,a.createElement(t.p,null,"Critical to the speed of delivery is an early investment in continuous integration/continuous delivery (CI/CD). It’s likely you have already wrangled continuous integration. Continuous deployment pipelines are your next step in seeing that changes to your source code automatically result in a new container being built and a new version of your microservice being tested and deployed to staging and eventually to production.")),a.createElement("p",null,a.createElement(t.p,null,"For many, the notion that CI/CD is an area of early investment is counterintuitive, and they find it hard to swallow the upfront engineering effort required to get a solid pipeline in place. The sooner CI/CD basics are implemented, however, the sooner the dividends start paying out. We will cover advanced continuous delivery considerations later in this white paper.")),a.createElement("p",null,a.createElement(t.p,null,"With cloud native infrastructure’s being inherently dynamic (in contrast to infrastructure not driven by APIs,) the ability to observe cloud native infrastructure and its workloads is also necessary. Software is written with functionality and debugging in mind. Most often, developers use logging as the primary method for debugging their applications. Integration with Elasticsearch and Kibana is key here.")),a.createElement("p",null,a.createElement(t.p,null,"Performance counters are another way to track application behavior and performance. Akin to SNMP for physical and virtual network monitoring, the equivalent cloud native “standard” is the use of Prometheus and Grafana, so it’s important that your application delivery solution integrate with these tools. Currently there is no recognized standard for cloud native application performance monitoring metrics.")),a.createElement("div",{className:"intro"},a.createElement("h3",{style:{textAlign:"center"}},"OpenMetrics"),a.createElement("p",null,a.createElement(t.p,null,"The cloud native ecosystem needs a common format for the exchange of metrics. Observability pains grow with the release of each newly instrumented service that presents its own metric format. OpenMetrics is an effort to create an open standard for transmitting metrics at scale, with support for both text representation and protocolbBuffers. OpenMetrics builds on Prometheus’s exposition format, popular telemetry formats, and protocols used in infrastructure and application monitoring."))),a.createElement("p",null,a.createElement(t.p,null,"Irrespective of the metrics format, there are a few metrics that have been identified as key indicators of the health of a cloud native application (that is, the health of a service): latency, traffic, errors, and saturation. Your application delivery solution should assist in producing these signals as well as provide support for the tracing of your distributed, cloud native workloads.")),a.createElement("p",null,a.createElement(t.p,null,"The aforementioned integrations with open source tools enable loosely coupled systems that are resilient, manageable, and observable. Citrix ADC also embodies these characteristics. All of the infrastructure integrations detailed here depend upon APIs for interchange and interoperability. Cloud native applications, too, are centered around declarative APIs to interface with the infrastructure and serve user-facing workloads.")),a.createElement("p",null,a.createElement(t.p,null,"The endpoints that your APIs expose are now being managed by open source service meshes. Service meshes deliver the next generation of networking designed for cloud native applications. At the core of a service mesh is its data plane (its collection of proxies). Proxy selection criteria and deployment model tradeoffs are our next area of consideration.")),a.createElement(t.p,null,a.createElement(t.em,null,"** Check out the topic ",a.createElement(m,{to:"/resources/service-mesh/choosing-the-perfect-proxy"},"Choosing the Perfect Proxy")," to learn more! **")))}var h=function(e){void 0===e&&(e={});var t=Object.assign({},(0,r.ah)(),e.components).wrapper;return t?a.createElement(t,e,a.createElement(m,e)):m(e)};function p(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}var f=n(17875),y=n(72417),g=function(e){var t=e.data,n=e.children;return a.createElement(a.Fragment,null,a.createElement(y.Z,{data:t},n))};function v(e){return a.createElement(g,e,a.createElement(h,e))}var b=function(e){var t=e.data;return a.createElement(f.Z,{title:t.mdx.frontmatter.title,image:t.mdx.frontmatter.thumbnail.publicURL})}},72417:function(e,t,n){"use strict";n.d(t,{Z:function(){return b}});var r=n(67294),a=n(71082),i=n(40156),o=n(6652),s=n(33754),l=n(85313).default.div.withConfig({displayName:"resourceSinglestyle__ResourcePageWrapper",componentId:"sc-gfz8rr-0"})(["\n    color: ",";\n    .single-resource-wrapper{\n        margin-bottom: 4rem;\n\n        h3 {\n            text-align: center;\n        }\n    }\n\n    .resource-info-block{\n        margin-top: 3rem;\n        border-bottom: 1px solid ",";\n        padding-bottom: 2rem;\n    }\n    p {\n        color: ",";\n    }\n    li {\n        color: ",";\n    }\n    .backBtn {\n        margin: 3rem auto;\n        font-weight: 600;\n        z-index: 2;\n\n        @media screen and (max-width: 62rem) {\n            display: none;\n        }\n        a{\n            display: flex;\n            color: ",";\n            &:hover{\n                color: ",";\n            }\n\n            h4 {\n                line-height: 1.75rem;\n                margin-left: 0.5rem;\n            }\n            svg {\n                font-size: 1.75rem;\n            }\n        }\n    }\n\n    .tags{\n        display: flex;\n        span{\n            font-size: 1.2rem;\n            align-self: center;\n        }\n        a{\n            color: ",";\n            margin: 0.2rem;\n            display: inline-block;\n            padding: 0.3rem 0.8rem;\n            border-radius: 0.2rem;\n            background: #F0F0F0;\n            transition: all 0.3s linear;\n            &:hover{\n                background: ",";\n                color: ",";\n            }\n        }\n        div{\n            display: inline-flex;\n            flex-wrap: wrap;\n        }\n    }\n    @media screen and (max-width: 360px){\n        .tags{\n            span{\n                position: relative;\n                top: 0.5rem;\n                align-self: flex-start;\n            }\n        }\n    }\n"],(function(e){return e.theme.text}),(function(e){return e.theme.text}),(function(e){return e.theme.text}),(function(e){return e.theme.text}),(function(e){return e.theme.primaryColor}),(function(e){return e.theme.linkColor}),(function(e){return e.theme.black}),(function(e){return e.theme.secondaryColor}),(function(e){return e.theme.white})),c=n(75472),u=n.n(c),d=n(64721),m=n.n(d);function h(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(n)return(n=n.call(e)).next.bind(n);if(Array.isArray(e)||(n=function(e,t){if(!e)return;if("string"==typeof e)return p(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return p(e,t)}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0;return function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function p(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var f=function(){function e(e,t){this.resources=e.filter((function(e){return e.fields.slug!==t})),this.currentResourceSlug=t,this.maxResources=6,this.category=null,this.tags=[]}var t=e.prototype;return t.setMaxResources=function(e){return this.maxResources=e,this},t.setCategory=function(e){return this.category=e,this},t.setTags=function(e){return this.tags=e,this},t.getResources=function(){var e=this.category,t=this.tags,n=this.resources,r=this.maxResources,a={};if(!1==!!t||0===t.length)return console.error("RelatedResourcesFactory: Tags not provided, use setTags()."),[];if(!1==!!e)return console.error("RelatedResourcesFactory: Category not provided, use setCategory()."),[];for(var i,o=function(e){return e.fields.slug},s=function(e){var t=o(e);Object.prototype.hasOwnProperty.call(a,t)||(a[t]={resource:e,points:0})},l=function(e,t){var n=o(e);e.frontmatter.category===t&&(a[n].points+=2)},c=function(e,t){var n=o(e);e.frontmatter.tags.forEach((function(e){m()(t,e)&&(a[n].points+=1)}))},d=h(n);!(i=d()).done;){var p=i.value;s(p),l(p,e),c(p,t)}var f=Object.keys(a).map((function(e){return a[e]}));return u()(f,["points"],["desc"]).splice(0,r)},e}(),y=n(78705),g=(0,i.ZP)((function(){return n.e(35575).then(n.bind(n,59434))})),v=(0,i.ZP)((function(){return Promise.all([n.e(40532),n.e(67326),n.e(18514)]).then(n.bind(n,24210))})),b=function(e){var t=e.data,n=e.children,i=t.mdx,c=i.frontmatter,u=i.fields,d=(0,a.useStaticQuery)("2848499768").allMdx.nodes,m=new f(d,u.slug).setMaxResources(6).setCategory(c.category).setTags(c.tags).getResources();return r.createElement(l,null,r.createElement(s.Z,{title:c.title,subtitle:c.subtitle,thumbnail:c.thumbnail}),r.createElement("div",{className:"single-resource-wrapper"},r.createElement(o.W2,null,n,r.createElement(g,{category:"MeshMap"}),r.createElement("div",{className:"backBtn"},r.createElement(a.Link,{to:"/resources"},r.createElement(y.O,null),r.createElement("h4",null,"All Resources"))),r.createElement(v,{resourceType:"resources",relatedResources:m,mainHead:"Related Resources",lastCardHead:"All Resources",linkToAllItems:"/resources"}))))}}}]);