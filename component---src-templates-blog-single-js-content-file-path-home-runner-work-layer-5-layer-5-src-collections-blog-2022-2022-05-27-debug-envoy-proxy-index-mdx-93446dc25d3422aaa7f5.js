"use strict";(self.webpackChunkLayer5=self.webpackChunkLayer5||[]).push([[19670],{85925:function(e,t,n){n.r(t),n.d(t,{Head:function(){return g},default:function(){return m}});var l=n(39626),o=n(67294);function a(e){var t=Object.assign({p:"p",a:"a",br:"br",h1:"h1"},(0,l.ah)(),e.components),n=t.BlogWrapper,a=t.Link;return n||c("BlogWrapper",!0),a||c("Link",!0),o.createElement(n,null,o.createElement("p",null,o.createElement(t.p,null,"Trying to figure out what's happening with your request traffic? Not sure why your Envoy configuration isn't working? If you're using Istio as your gateway and need to troubleshoot your ingress traffic requests, here are a few tips for debugging Envoy proxy.")),o.createElement("h2",null,"Enable Envoy Debug Logging"),o.createElement("p",null,o.createElement(t.p,null,"By default Envoy system logs are sent to ",o.createElement("code",null,"/dev/stderr"),". This location be overridden using ",o.createElement("code",null,"--log-path"),". Logging to ",o.createElement("code",null,"/dev/stderr"),"  for system logs and to ",o.createElement("code",null,"/dev/stdout")," for access logs can be useful when running Envoy inside a container. In this way, these two individual logstreams can be separated, and using this approach, logging requires no additional files or directories to be mounted.")),o.createElement("div",{className:"intro"},o.createElement("p",null,o.createElement(t.p,null,"We recommend setting the Envoy proxy’s log level to debug in a pre-production environment. Debug logs can help you identify issues before you graduate the associated configuration to your production environment."))),o.createElement("h3",null,"Using envoy CLI"),o.createElement("p",null,o.createElement(t.p,null,"The envoy command has a ",o.createElement("code",null,"--log-level")," flag that can be useful for debugging. By default, it’s set to info. To change it to debug, edit the envoy DaemonSet in the istio-system namespace and replace the ",o.createElement("code",null,"--log-level info")," flag with ",o.createElement("code",null,"--log-level debug"),". Setting the Envoy log level to debug can be particilarly useful for debugging TLS connection failures.")),o.createElement("h3",null,"Using container image"),o.createElement("p",null,o.createElement(t.p,null,"If you’re using the Envoy image, you can set the log level to debug through the ",o.createElement("code",null,"ENVOY_LOG_LEVEL")," environment variable. The log level for Envoy system logs can be set using the ",o.createElement("code",null,"-l")," or ",o.createElement("code",null,"--log-level")," option.")),o.createElement(t.p,null,"The available log levels are:"),o.createElement("ul",null,o.createElement("li",{className:"highlight",style:{width:"fitContent"}},"trace"),o.createElement("li",{className:"highlight",style:{width:"fitContent"}},"debug"),o.createElement("li",{className:"highlight",style:{width:"fitContent"}},"info"),o.createElement("li",{className:"highlight",style:{width:"fitContent"}},"warning/warn"),o.createElement("li",{className:"highlight",style:{width:"fitContent"}},"error"),o.createElement("li",{className:"highlight",style:{width:"fitContent"}},"critical"),o.createElement("li",{className:"highlight",style:{width:"fitContent"}},"off")),o.createElement(t.p,null,"The default is ",o.createElement("span",{className:"highlight"},"info"),"."),o.createElement("h3",null,"Setting Envoy logs in the Helm configuration"),o.createElement("p",null,o.createElement(t.p,null,"The Consul helm chart uses ",o.createElement("code",null,"envoyExtraArgs:")," to leverage Envoy command line options. One of the helpful options is ",o.createElement("code",null,"--component-log-level"),". This provides granular control over setting log levels for Envoy components. In the example below, the components upstream, http, router and config are set to the debug log level. These four components are vital when debugging issues with requests between your services(sidecar proxies).")),o.createElement("div",null,o.createElement("pre",null,o.createElement("code",null,'connectInject:\nenabled: true\nenvoyExtraArgs: "--component-log-level upstream:debug,http:debug,router:debug,config:debug"'))),o.createElement("p",null,o.createElement(t.p,null,"If you haven't set envoyExtraArgs: in consul-values.yaml just yet, you can set the log levels on the fly by using the following kubectl command:")),o.createElement("div",null,o.createElement("pre",null,o.createElement("code",null,"$ kubectl exec pod/pod-name -c container-name -- curl -X POST ",o.createElement(t.a,{href:"http://localhost:19000/logging?config=debug"},"http://localhost:19000/logging?config=debug")))),o.createElement("p",null,"Example:"),o.createElement("div",null,o.createElement("pre",null,o.createElement("code",null,"$ kubectl exec pod/static-client-5bf4575d9c-zr2b -c static-client -- curl -X POST  ",o.createElement(t.a,{href:"http://localhost:19000/logging?config=debug"},"http://localhost:19000/logging?config=debug")))),o.createElement("p",null,o.createElement(t.p,null,"You will execute the kubectl command for each component. Make sure to append the correct component at the end of the curl command, i.e. ",o.createElement("code",null,"logging? component = debug"),".")),o.createElement("p",null,o.createElement(t.p,null,"If curl is not able to be used in your pod, you can alternatively use ",o.createElement("code",null,"kubectl port-forward pod-name 19000")," to make the Envoy admin accessible. From another terminal window, you can then curl to change the log levels. The output you receive in the terminal will show the modified component log levels.")),o.createElement("div",null,o.createElement("pre",null,o.createElement("code",null,"$ curl -X POST ",o.createElement(t.a,{href:"http://localhost:19000/logging"},"http://localhost:19000/logging"),"? component = debug"))),o.createElement("h3",null,"Access Envoy logs in Kubernetes"),o.createElement("p",null,"Accessing Envoy logs via pods can be done with the following command:"),o.createElement("div",null,o.createElement("pre",null,o.createElement("code",null,"$ kubectl logs --follow pod/ pod-name -c envoy-sidecar"))),o.createElement("p",null,"The --follow flag provides a real time observation into Envoy logs. "),o.createElement("h3",null,"Setting and Accessing Envoy logs when not using Helm."),o.createElement("p",null,"The following command will start an envoy side car proxy, set the log level to debug with -l debug and capture Envoy logs in envoy_logs.txt. The .txt file will need to be created before executing this command."),o.createElement("div",null,o.createElement("pre",null,o.createElement("code",null,"$ consul connect envoy -sidecar-for counting-1 -- -l debug --log-path envoy_logs.txt"))),o.createElement("p",null,"To have granular control over the Envoy components that is needed to be debugged, use the following command:"),o.createElement("div",null,o.createElement("pre",null,o.createElement("code",null,"$ consul connect envoy -sidecar-for counting-1 -- --log-path envoy_logs.txt --component-log-level upstream:debug,http:debug,router:debug,config:debug"))),o.createElement("h2",null,"Find your Istio Ingress Gateway"),o.createElement("p",null,o.createElement(t.p,null,"With Istio as your gateway, you should first look at ",o.createElement("code",null,"VirtualService")," objects. These can show if the hosts are registered to the gateway correctly.")),o.createElement("div",null,o.createElement("pre",null,o.createElement("code",null,"$ kubectl get virtualservice -o=yaml"))),o.createElement("p",null,o.createElement(t.p,null,"However, sometimes, the ",o.createElement("a",{className:"highlight",href:"https://envoyproxy.io"},"Envoy")," inside the gateway container is not properly configured (likely due to a bug). You can dump Envoy configuration to debug this further.")),o.createElement("div",null,o.createElement("pre",null,o.createElement("code",null,"# find istio ingress gateway pod ",o.createElement(t.br),"\n","$ kubectl get pods -n istio-system -l app=istio-ingressgateway"))),o.createElement("p",null,o.createElement(t.p,null,"Let's use ",o.createElement("code",null,"istio-ingressgateway-a93019f9dfw-l39xd")," as an example pod name.")),o.createElement("div",null,o.createElement("pre",null,o.createElement("code",null,o.createElement(t.h1,null,"enable debugging on envoy \\"),o.createElement(t.p,null,"$ kubectl exec --namespace=istio-system ",o.createElement(t.br),"\n","istio-ingressgateway-a93019f9dfw-l39xd ",o.createElement(t.br),"\n","-c istio-proxy -- curl -X POST ",o.createElement(t.br),"\n",o.createElement(t.a,{href:"http://localhost:15000/logging?level=debug"},"http://localhost:15000/logging?level=debug"))))),o.createElement("p",null,o.createElement(t.p,null,"Then, use ",o.createElement("code",null,"istioctl")," tool to dump route configuration (this will show the output from the ",o.createElement("a",{href:"https://www.envoyproxy.io/docs/envoy/latest/operations/admin#operations-admin-interface-config-dump"},o.createElement("code",null,"/config_dump")," admin endpoint")," on Envoy):")),o.createElement("div",null,o.createElement("pre",null,o.createElement("code",null,o.createElement(t.p,null,"$ istioctl proxy-config routes -n istio-system -o=json ",o.createElement(t.br),"\n","istio-ingressgateway-a93019f9dfw-l39xd")))),o.createElement("p",null,o.createElement(t.p,null,"We hope these steps are useful to you. If you're still having trouble configuring Envoy proxy, open up a new thread on the ",o.createElement("a",{href:"https://discuss.layer5.io",className:"highlight"},"community discussion forum")," or subscribe to the ",o.createElement(a,{to:"/subscribe",className:"highlight"},"Layer5 newletter")," for tips and tricks.")))}var r=function(e){void 0===e&&(e={});var t=Object.assign({},(0,l.ah)(),e.components).wrapper;return t?o.createElement(t,e,o.createElement(a,e)):a(e)};function c(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}var i=n(17875),u=n(85235),s=function(e){var t=e.data,n=e.children;return o.createElement(o.Fragment,null,o.createElement(u.Z,{data:t},n))};function m(e){return o.createElement(s,e,o.createElement(r,e))}var g=function(e){var t=e.data;return o.createElement(i.Z,{title:t.mdx.frontmatter.title,image:t.mdx.frontmatter.thumbnail.publicURL})}}}]);